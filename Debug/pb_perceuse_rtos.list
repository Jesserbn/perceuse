
pb_perceuse_rtos.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d8c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002f5c  08002f5c  00012f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f94  08002f94  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08002f94  08002f94  00012f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002f9c  08002f9c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fa0  08002fa0  00012fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08002fa4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003fd8  20000010  08002fb4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003fe8  08002fb4  00023fe8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008bb7  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ec5  00000000  00000000  00028c3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000948  00000000  00000000  0002ab00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006e9  00000000  00000000  0002b448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021756  00000000  00000000  0002bb31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b2ac  00000000  00000000  0004d287  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cda8d  00000000  00000000  00058533  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000023cc  00000000  00000000  00125fc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0012838c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002f44 	.word	0x08002f44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08002f44 	.word	0x08002f44

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800050c:	b480      	push	{r7}
 800050e:	b085      	sub	sp, #20
 8000510:	af00      	add	r7, sp, #0
 8000512:	60f8      	str	r0, [r7, #12]
 8000514:	60b9      	str	r1, [r7, #8]
 8000516:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000518:	68fb      	ldr	r3, [r7, #12]
 800051a:	4a07      	ldr	r2, [pc, #28]	; (8000538 <vApplicationGetIdleTaskMemory+0x2c>)
 800051c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800051e:	68bb      	ldr	r3, [r7, #8]
 8000520:	4a06      	ldr	r2, [pc, #24]	; (800053c <vApplicationGetIdleTaskMemory+0x30>)
 8000522:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	2280      	movs	r2, #128	; 0x80
 8000528:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800052a:	bf00      	nop
 800052c:	3714      	adds	r7, #20
 800052e:	46bd      	mov	sp, r7
 8000530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop
 8000538:	2000002c 	.word	0x2000002c
 800053c:	20000080 	.word	0x20000080

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fa3f 	bl	80009c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f845 	bl	80005d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f8a3 	bl	8000698 <MX_GPIO_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  xTaskCreate(vDescente_Task,"desc",128,NULL,2,&DE);
 8000552:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <main+0x68>)
 8000554:	9301      	str	r3, [sp, #4]
 8000556:	2302      	movs	r3, #2
 8000558:	9300      	str	r3, [sp, #0]
 800055a:	2300      	movs	r3, #0
 800055c:	2280      	movs	r2, #128	; 0x80
 800055e:	4913      	ldr	r1, [pc, #76]	; (80005ac <main+0x6c>)
 8000560:	4813      	ldr	r0, [pc, #76]	; (80005b0 <main+0x70>)
 8000562:	f001 fb5c 	bl	8001c1e <xTaskCreate>
  xTaskCreate(vMontee_Task,"monte",128,NULL,2,&MO);
 8000566:	4b13      	ldr	r3, [pc, #76]	; (80005b4 <main+0x74>)
 8000568:	9301      	str	r3, [sp, #4]
 800056a:	2302      	movs	r3, #2
 800056c:	9300      	str	r3, [sp, #0]
 800056e:	2300      	movs	r3, #0
 8000570:	2280      	movs	r2, #128	; 0x80
 8000572:	4911      	ldr	r1, [pc, #68]	; (80005b8 <main+0x78>)
 8000574:	4811      	ldr	r0, [pc, #68]	; (80005bc <main+0x7c>)
 8000576:	f001 fb52 	bl	8001c1e <xTaskCreate>
  xTaskCreate(vArret_Urgence_Task,"urgence",128,NULL,1,&AR);
 800057a:	4b11      	ldr	r3, [pc, #68]	; (80005c0 <main+0x80>)
 800057c:	9301      	str	r3, [sp, #4]
 800057e:	2301      	movs	r3, #1
 8000580:	9300      	str	r3, [sp, #0]
 8000582:	2300      	movs	r3, #0
 8000584:	2280      	movs	r2, #128	; 0x80
 8000586:	490f      	ldr	r1, [pc, #60]	; (80005c4 <main+0x84>)
 8000588:	480f      	ldr	r0, [pc, #60]	; (80005c8 <main+0x88>)
 800058a:	f001 fb48 	bl	8001c1e <xTaskCreate>
  xTaskCreate(vControle_Task,"cntr",128,NULL,2,&CNT);
 800058e:	4b0f      	ldr	r3, [pc, #60]	; (80005cc <main+0x8c>)
 8000590:	9301      	str	r3, [sp, #4]
 8000592:	2302      	movs	r3, #2
 8000594:	9300      	str	r3, [sp, #0]
 8000596:	2300      	movs	r3, #0
 8000598:	2280      	movs	r2, #128	; 0x80
 800059a:	490d      	ldr	r1, [pc, #52]	; (80005d0 <main+0x90>)
 800059c:	480d      	ldr	r0, [pc, #52]	; (80005d4 <main+0x94>)
 800059e:	f001 fb3e 	bl	8001c1e <xTaskCreate>
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80005a2:	f001 fa5d 	bl	8001a60 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005a6:	e7fe      	b.n	80005a6 <main+0x66>
 80005a8:	20000284 	.word	0x20000284
 80005ac:	08002f5c 	.word	0x08002f5c
 80005b0:	08000795 	.word	0x08000795
 80005b4:	20000288 	.word	0x20000288
 80005b8:	08002f64 	.word	0x08002f64
 80005bc:	08000751 	.word	0x08000751
 80005c0:	20000280 	.word	0x20000280
 80005c4:	08002f6c 	.word	0x08002f6c
 80005c8:	080007d9 	.word	0x080007d9
 80005cc:	2000028c 	.word	0x2000028c
 80005d0:	08002f74 	.word	0x08002f74
 80005d4:	08000839 	.word	0x08000839

080005d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b094      	sub	sp, #80	; 0x50
 80005dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	2234      	movs	r2, #52	; 0x34
 80005e4:	2100      	movs	r1, #0
 80005e6:	4618      	mov	r0, r3
 80005e8:	f002 fc80 	bl	8002eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005ec:	f107 0308 	add.w	r3, r7, #8
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
 80005fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005fc:	2300      	movs	r3, #0
 80005fe:	607b      	str	r3, [r7, #4]
 8000600:	4b23      	ldr	r3, [pc, #140]	; (8000690 <SystemClock_Config+0xb8>)
 8000602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000604:	4a22      	ldr	r2, [pc, #136]	; (8000690 <SystemClock_Config+0xb8>)
 8000606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800060a:	6413      	str	r3, [r2, #64]	; 0x40
 800060c:	4b20      	ldr	r3, [pc, #128]	; (8000690 <SystemClock_Config+0xb8>)
 800060e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000618:	2300      	movs	r3, #0
 800061a:	603b      	str	r3, [r7, #0]
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <SystemClock_Config+0xbc>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <SystemClock_Config+0xbc>)
 8000626:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800062a:	6013      	str	r3, [r2, #0]
 800062c:	4b19      	ldr	r3, [pc, #100]	; (8000694 <SystemClock_Config+0xbc>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000634:	603b      	str	r3, [r7, #0]
 8000636:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000638:	2302      	movs	r3, #2
 800063a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000640:	2310      	movs	r3, #16
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000644:	2300      	movs	r3, #0
 8000646:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000648:	f107 031c 	add.w	r3, r7, #28
 800064c:	4618      	mov	r0, r3
 800064e:	f000 ff69 	bl	8001524 <HAL_RCC_OscConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000658:	f000 f924 	bl	80008a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800065c:	230f      	movs	r3, #15
 800065e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000660:	2300      	movs	r3, #0
 8000662:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800066c:	2300      	movs	r3, #0
 800066e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2100      	movs	r1, #0
 8000676:	4618      	mov	r0, r3
 8000678:	f000 fcc4 	bl	8001004 <HAL_RCC_ClockConfig>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000682:	f000 f90f 	bl	80008a4 <Error_Handler>
  }
}
 8000686:	bf00      	nop
 8000688:	3750      	adds	r7, #80	; 0x50
 800068a:	46bd      	mov	sp, r7
 800068c:	bd80      	pop	{r7, pc}
 800068e:	bf00      	nop
 8000690:	40023800 	.word	0x40023800
 8000694:	40007000 	.word	0x40007000

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
 80006ac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	60bb      	str	r3, [r7, #8]
 80006b2:	4b24      	ldr	r3, [pc, #144]	; (8000744 <MX_GPIO_Init+0xac>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a23      	ldr	r2, [pc, #140]	; (8000744 <MX_GPIO_Init+0xac>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_GPIO_Init+0xac>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ca:	2300      	movs	r3, #0
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	4b1d      	ldr	r3, [pc, #116]	; (8000744 <MX_GPIO_Init+0xac>)
 80006d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d2:	4a1c      	ldr	r2, [pc, #112]	; (8000744 <MX_GPIO_Init+0xac>)
 80006d4:	f043 0302 	orr.w	r3, r3, #2
 80006d8:	6313      	str	r3, [r2, #48]	; 0x30
 80006da:	4b1a      	ldr	r3, [pc, #104]	; (8000744 <MX_GPIO_Init+0xac>)
 80006dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006de:	f003 0302 	and.w	r3, r3, #2
 80006e2:	607b      	str	r3, [r7, #4]
 80006e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 80006e6:	2200      	movs	r2, #0
 80006e8:	211e      	movs	r1, #30
 80006ea:	4817      	ldr	r0, [pc, #92]	; (8000748 <MX_GPIO_Init+0xb0>)
 80006ec:	f000 fc70 	bl	8000fd0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80006f0:	231e      	movs	r3, #30
 80006f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006f4:	2300      	movs	r3, #0
 80006f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	4619      	mov	r1, r3
 8000702:	4812      	ldr	r0, [pc, #72]	; (800074c <MX_GPIO_Init+0xb4>)
 8000704:	f000 fab8 	bl	8000c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 8000708:	2381      	movs	r3, #129	; 0x81
 800070a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800070c:	2300      	movs	r3, #0
 800070e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000714:	f107 030c 	add.w	r3, r7, #12
 8000718:	4619      	mov	r1, r3
 800071a:	480b      	ldr	r0, [pc, #44]	; (8000748 <MX_GPIO_Init+0xb0>)
 800071c:	f000 faac 	bl	8000c78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB3 PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8000720:	231e      	movs	r3, #30
 8000722:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000724:	2301      	movs	r3, #1
 8000726:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	2300      	movs	r3, #0
 800072a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800072c:	2300      	movs	r3, #0
 800072e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000730:	f107 030c 	add.w	r3, r7, #12
 8000734:	4619      	mov	r1, r3
 8000736:	4804      	ldr	r0, [pc, #16]	; (8000748 <MX_GPIO_Init+0xb0>)
 8000738:	f000 fa9e 	bl	8000c78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800073c:	bf00      	nop
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	40023800 	.word	0x40023800
 8000748:	40020400 	.word	0x40020400
 800074c:	40020000 	.word	0x40020000

08000750 <vMontee_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void vMontee_Task(void *pvParameters)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)!=GPIO_PIN_SET)
 8000758:	e004      	b.n	8000764 <vMontee_Task+0x14>
	  	{
	  	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3|1,GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	2109      	movs	r1, #9
 800075e:	480a      	ldr	r0, [pc, #40]	; (8000788 <vMontee_Task+0x38>)
 8000760:	f000 fc36 	bl	8000fd0 <HAL_GPIO_WritePin>
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)!=GPIO_PIN_SET)
 8000764:	2108      	movs	r1, #8
 8000766:	4809      	ldr	r0, [pc, #36]	; (800078c <vMontee_Task+0x3c>)
 8000768:	f000 fc1a 	bl	8000fa0 <HAL_GPIO_ReadPin>
 800076c:	4603      	mov	r3, r0
 800076e:	2b01      	cmp	r3, #1
 8000770:	d1f3      	bne.n	800075a <vMontee_Task+0xa>
	  	}
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3|1,GPIO_PIN_RESET);
 8000772:	2200      	movs	r2, #0
 8000774:	2109      	movs	r1, #9
 8000776:	4804      	ldr	r0, [pc, #16]	; (8000788 <vMontee_Task+0x38>)
 8000778:	f000 fc2a 	bl	8000fd0 <HAL_GPIO_WritePin>
	  vTaskSuspend(MO);
 800077c:	4b04      	ldr	r3, [pc, #16]	; (8000790 <vMontee_Task+0x40>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fb83 	bl	8001e8c <vTaskSuspend>
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)!=GPIO_PIN_SET)
 8000786:	e7ed      	b.n	8000764 <vMontee_Task+0x14>
 8000788:	40020400 	.word	0x40020400
 800078c:	40020000 	.word	0x40020000
 8000790:	20000288 	.word	0x20000288

08000794 <vDescente_Task>:
  }
}
void vDescente_Task(void *pvParameters)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b082      	sub	sp, #8
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)!=GPIO_PIN_SET)
 800079c:	e004      	b.n	80007a8 <vDescente_Task+0x14>
	  	{
	  	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2|1,GPIO_PIN_SET);
 800079e:	2201      	movs	r2, #1
 80007a0:	2105      	movs	r1, #5
 80007a2:	480a      	ldr	r0, [pc, #40]	; (80007cc <vDescente_Task+0x38>)
 80007a4:	f000 fc14 	bl	8000fd0 <HAL_GPIO_WritePin>
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)!=GPIO_PIN_SET)
 80007a8:	2110      	movs	r1, #16
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <vDescente_Task+0x3c>)
 80007ac:	f000 fbf8 	bl	8000fa0 <HAL_GPIO_ReadPin>
 80007b0:	4603      	mov	r3, r0
 80007b2:	2b01      	cmp	r3, #1
 80007b4:	d1f3      	bne.n	800079e <vDescente_Task+0xa>
	  	}
	  HAL_GPIO_WritePin(GPIOB,GPIO_PIN_2|1,GPIO_PIN_RESET);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2105      	movs	r1, #5
 80007ba:	4804      	ldr	r0, [pc, #16]	; (80007cc <vDescente_Task+0x38>)
 80007bc:	f000 fc08 	bl	8000fd0 <HAL_GPIO_WritePin>
	  vTaskSuspend(DE);
 80007c0:	4b04      	ldr	r3, [pc, #16]	; (80007d4 <vDescente_Task+0x40>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4618      	mov	r0, r3
 80007c6:	f001 fb61 	bl	8001e8c <vTaskSuspend>
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_4)!=GPIO_PIN_SET)
 80007ca:	e7ed      	b.n	80007a8 <vDescente_Task+0x14>
 80007cc:	40020400 	.word	0x40020400
 80007d0:	40020000 	.word	0x40020000
 80007d4:	20000284 	.word	0x20000284

080007d8 <vArret_Urgence_Task>:
  }
}
void vArret_Urgence_Task(void *pvParameters)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b082      	sub	sp, #8
 80007dc:	af00      	add	r7, sp, #0
 80007de:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 80007e0:	2200      	movs	r2, #0
 80007e2:	2102      	movs	r1, #2
 80007e4:	4811      	ldr	r0, [pc, #68]	; (800082c <vArret_Urgence_Task+0x54>)
 80007e6:	f000 fbf3 	bl	8000fd0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3|4,GPIO_PIN_SET);
 80007ea:	2201      	movs	r2, #1
 80007ec:	210c      	movs	r1, #12
 80007ee:	480f      	ldr	r0, [pc, #60]	; (800082c <vArret_Urgence_Task+0x54>)
 80007f0:	f000 fbee 	bl	8000fd0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)!=GPIO_PIN_SET){}
 80007f4:	bf00      	nop
 80007f6:	2108      	movs	r1, #8
 80007f8:	480d      	ldr	r0, [pc, #52]	; (8000830 <vArret_Urgence_Task+0x58>)
 80007fa:	f000 fbd1 	bl	8000fa0 <HAL_GPIO_ReadPin>
 80007fe:	4603      	mov	r3, r0
 8000800:	2b01      	cmp	r3, #1
 8000802:	d1f8      	bne.n	80007f6 <vArret_Urgence_Task+0x1e>
	HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 8000804:	2200      	movs	r2, #0
 8000806:	2108      	movs	r1, #8
 8000808:	4808      	ldr	r0, [pc, #32]	; (800082c <vArret_Urgence_Task+0x54>)
 800080a:	f000 fbe1 	bl	8000fd0 <HAL_GPIO_WritePin>
	while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_7)!=GPIO_PIN_SET){}
 800080e:	bf00      	nop
 8000810:	2180      	movs	r1, #128	; 0x80
 8000812:	4807      	ldr	r0, [pc, #28]	; (8000830 <vArret_Urgence_Task+0x58>)
 8000814:	f000 fbc4 	bl	8000fa0 <HAL_GPIO_ReadPin>
 8000818:	4603      	mov	r3, r0
 800081a:	2b01      	cmp	r3, #1
 800081c:	d1f8      	bne.n	8000810 <vArret_Urgence_Task+0x38>
	vTaskSuspend(AR);
 800081e:	4b05      	ldr	r3, [pc, #20]	; (8000834 <vArret_Urgence_Task+0x5c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f001 fb32 	bl	8001e8c <vTaskSuspend>
    HAL_GPIO_WritePin(GPIOB,GPIO_PIN_1,GPIO_PIN_RESET);
 8000828:	e7da      	b.n	80007e0 <vArret_Urgence_Task+0x8>
 800082a:	bf00      	nop
 800082c:	40020400 	.word	0x40020400
 8000830:	40020000 	.word	0x40020000
 8000834:	20000280 	.word	0x20000280

08000838 <vControle_Task>:
  }
}
void vControle_Task(void *pvParameters)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b082      	sub	sp, #8
 800083c:	af00      	add	r7, sp, #0
 800083e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)==GPIO_PIN_SET)
 8000840:	e004      	b.n	800084c <vControle_Task+0x14>
	     {
	     	vTaskResume(DE);
 8000842:	4b13      	ldr	r3, [pc, #76]	; (8000890 <vControle_Task+0x58>)
 8000844:	681b      	ldr	r3, [r3, #0]
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fbe4 	bl	8002014 <vTaskResume>
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)==GPIO_PIN_SET)
 800084c:	2108      	movs	r1, #8
 800084e:	4811      	ldr	r0, [pc, #68]	; (8000894 <vControle_Task+0x5c>)
 8000850:	f000 fba6 	bl	8000fa0 <HAL_GPIO_ReadPin>
 8000854:	4603      	mov	r3, r0
 8000856:	2b01      	cmp	r3, #1
 8000858:	d0f3      	beq.n	8000842 <vControle_Task+0xa>
	     }
	     while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2)==GPIO_PIN_SET)
 800085a:	e004      	b.n	8000866 <vControle_Task+0x2e>
	         {
	    	 vTaskResume(MO);
 800085c:	4b0e      	ldr	r3, [pc, #56]	; (8000898 <vControle_Task+0x60>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4618      	mov	r0, r3
 8000862:	f001 fbd7 	bl	8002014 <vTaskResume>
	     while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_2)==GPIO_PIN_SET)
 8000866:	2104      	movs	r1, #4
 8000868:	480a      	ldr	r0, [pc, #40]	; (8000894 <vControle_Task+0x5c>)
 800086a:	f000 fb99 	bl	8000fa0 <HAL_GPIO_ReadPin>
 800086e:	4603      	mov	r3, r0
 8000870:	2b01      	cmp	r3, #1
 8000872:	d0f3      	beq.n	800085c <vControle_Task+0x24>
	         }
	     while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)==GPIO_PIN_SET)
 8000874:	e004      	b.n	8000880 <vControle_Task+0x48>
	    	         {
	    	    	 vTaskResume(AR);
 8000876:	4b09      	ldr	r3, [pc, #36]	; (800089c <vControle_Task+0x64>)
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	4618      	mov	r0, r3
 800087c:	f001 fbca 	bl	8002014 <vTaskResume>
	     while(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_0)==GPIO_PIN_SET)
 8000880:	2101      	movs	r1, #1
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <vControle_Task+0x68>)
 8000884:	f000 fb8c 	bl	8000fa0 <HAL_GPIO_ReadPin>
 8000888:	4603      	mov	r3, r0
 800088a:	2b01      	cmp	r3, #1
 800088c:	d0f3      	beq.n	8000876 <vControle_Task+0x3e>
	  while(HAL_GPIO_ReadPin(GPIOA,GPIO_PIN_3)==GPIO_PIN_SET)
 800088e:	e7dd      	b.n	800084c <vControle_Task+0x14>
 8000890:	20000284 	.word	0x20000284
 8000894:	40020000 	.word	0x40020000
 8000898:	20000288 	.word	0x20000288
 800089c:	20000280 	.word	0x20000280
 80008a0:	40020400 	.word	0x40020400

080008a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008a8:	b672      	cpsid	i
}
 80008aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008ac:	e7fe      	b.n	80008ac <Error_Handler+0x8>
	...

080008b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b082      	sub	sp, #8
 80008b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b12      	ldr	r3, [pc, #72]	; (8000904 <HAL_MspInit+0x54>)
 80008bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008be:	4a11      	ldr	r2, [pc, #68]	; (8000904 <HAL_MspInit+0x54>)
 80008c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008c4:	6453      	str	r3, [r2, #68]	; 0x44
 80008c6:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <HAL_MspInit+0x54>)
 80008c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d2:	2300      	movs	r3, #0
 80008d4:	603b      	str	r3, [r7, #0]
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <HAL_MspInit+0x54>)
 80008d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008da:	4a0a      	ldr	r2, [pc, #40]	; (8000904 <HAL_MspInit+0x54>)
 80008dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e0:	6413      	str	r3, [r2, #64]	; 0x40
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_MspInit+0x54>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ea:	603b      	str	r3, [r7, #0]
 80008ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80008ee:	2200      	movs	r2, #0
 80008f0:	210f      	movs	r1, #15
 80008f2:	f06f 0001 	mvn.w	r0, #1
 80008f6:	f000 f996 	bl	8000c26 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fa:	bf00      	nop
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800090c:	e7fe      	b.n	800090c <NMI_Handler+0x4>

0800090e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090e:	b480      	push	{r7}
 8000910:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000912:	e7fe      	b.n	8000912 <HardFault_Handler+0x4>

08000914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000914:	b480      	push	{r7}
 8000916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000918:	e7fe      	b.n	8000918 <MemManage_Handler+0x4>

0800091a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091e:	e7fe      	b.n	800091e <BusFault_Handler+0x4>

08000920 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <UsageFault_Handler+0x4>

08000926 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800092a:	bf00      	nop
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr

08000934 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000938:	f000 f898 	bl	8000a6c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 800093c:	f001 febc 	bl	80026b8 <xTaskGetSchedulerState>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d001      	beq.n	800094a <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8000946:	f002 f897 	bl	8002a78 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
	...

08000950 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000954:	4b06      	ldr	r3, [pc, #24]	; (8000970 <SystemInit+0x20>)
 8000956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095a:	4a05      	ldr	r2, [pc, #20]	; (8000970 <SystemInit+0x20>)
 800095c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000960:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000964:	bf00      	nop
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr
 800096e:	bf00      	nop
 8000970:	e000ed00 	.word	0xe000ed00

08000974 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000974:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009ac <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000978:	f7ff ffea 	bl	8000950 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800097c:	480c      	ldr	r0, [pc, #48]	; (80009b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800097e:	490d      	ldr	r1, [pc, #52]	; (80009b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000980:	4a0d      	ldr	r2, [pc, #52]	; (80009b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0a      	ldr	r2, [pc, #40]	; (80009bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000994:	4c0a      	ldr	r4, [pc, #40]	; (80009c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80009a2:	f002 faab 	bl	8002efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009a6:	f7ff fdcb 	bl	8000540 <main>
  bx  lr    
 80009aa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009b8:	08002fa4 	.word	0x08002fa4
  ldr r2, =_sbss
 80009bc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009c0:	20003fe8 	.word	0x20003fe8

080009c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c4:	e7fe      	b.n	80009c4 <ADC_IRQHandler>
	...

080009c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <HAL_Init+0x40>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	4a0d      	ldr	r2, [pc, #52]	; (8000a08 <HAL_Init+0x40>)
 80009d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009d8:	4b0b      	ldr	r3, [pc, #44]	; (8000a08 <HAL_Init+0x40>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	4a0a      	ldr	r2, [pc, #40]	; (8000a08 <HAL_Init+0x40>)
 80009de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e4:	4b08      	ldr	r3, [pc, #32]	; (8000a08 <HAL_Init+0x40>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a07      	ldr	r2, [pc, #28]	; (8000a08 <HAL_Init+0x40>)
 80009ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f0:	2003      	movs	r0, #3
 80009f2:	f000 f90d 	bl	8000c10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009f6:	200f      	movs	r0, #15
 80009f8:	f000 f808 	bl	8000a0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009fc:	f7ff ff58 	bl	80008b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	40023c00 	.word	0x40023c00

08000a0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <HAL_InitTick+0x54>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b12      	ldr	r3, [pc, #72]	; (8000a64 <HAL_InitTick+0x58>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f917 	bl	8000c5e <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d001      	beq.n	8000a3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a36:	2301      	movs	r3, #1
 8000a38:	e00e      	b.n	8000a58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b0f      	cmp	r3, #15
 8000a3e:	d80a      	bhi.n	8000a56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a40:	2200      	movs	r2, #0
 8000a42:	6879      	ldr	r1, [r7, #4]
 8000a44:	f04f 30ff 	mov.w	r0, #4294967295
 8000a48:	f000 f8ed 	bl	8000c26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a4c:	4a06      	ldr	r2, [pc, #24]	; (8000a68 <HAL_InitTick+0x5c>)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a52:	2300      	movs	r3, #0
 8000a54:	e000      	b.n	8000a58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000000 	.word	0x20000000
 8000a64:	20000008 	.word	0x20000008
 8000a68:	20000004 	.word	0x20000004

08000a6c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a70:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <HAL_IncTick+0x20>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	461a      	mov	r2, r3
 8000a76:	4b06      	ldr	r3, [pc, #24]	; (8000a90 <HAL_IncTick+0x24>)
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	4a04      	ldr	r2, [pc, #16]	; (8000a90 <HAL_IncTick+0x24>)
 8000a7e:	6013      	str	r3, [r2, #0]
}
 8000a80:	bf00      	nop
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	20000008 	.word	0x20000008
 8000a90:	20000290 	.word	0x20000290

08000a94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  return uwTick;
 8000a98:	4b03      	ldr	r3, [pc, #12]	; (8000aa8 <HAL_GetTick+0x14>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	20000290 	.word	0x20000290

08000aac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b085      	sub	sp, #20
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	f003 0307 	and.w	r3, r3, #7
 8000aba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000abc:	4b0c      	ldr	r3, [pc, #48]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ac2:	68ba      	ldr	r2, [r7, #8]
 8000ac4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ac8:	4013      	ands	r3, r2
 8000aca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ad0:	68bb      	ldr	r3, [r7, #8]
 8000ad2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ad4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ad8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000adc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ade:	4a04      	ldr	r2, [pc, #16]	; (8000af0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ae0:	68bb      	ldr	r3, [r7, #8]
 8000ae2:	60d3      	str	r3, [r2, #12]
}
 8000ae4:	bf00      	nop
 8000ae6:	3714      	adds	r7, #20
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aee:	4770      	bx	lr
 8000af0:	e000ed00 	.word	0xe000ed00

08000af4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <__NVIC_GetPriorityGrouping+0x18>)
 8000afa:	68db      	ldr	r3, [r3, #12]
 8000afc:	0a1b      	lsrs	r3, r3, #8
 8000afe:	f003 0307 	and.w	r3, r3, #7
}
 8000b02:	4618      	mov	r0, r3
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000ed00 	.word	0xe000ed00

08000b10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b10:	b480      	push	{r7}
 8000b12:	b083      	sub	sp, #12
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	4603      	mov	r3, r0
 8000b18:	6039      	str	r1, [r7, #0]
 8000b1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	db0a      	blt.n	8000b3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	490c      	ldr	r1, [pc, #48]	; (8000b5c <__NVIC_SetPriority+0x4c>)
 8000b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b2e:	0112      	lsls	r2, r2, #4
 8000b30:	b2d2      	uxtb	r2, r2
 8000b32:	440b      	add	r3, r1
 8000b34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b38:	e00a      	b.n	8000b50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	b2da      	uxtb	r2, r3
 8000b3e:	4908      	ldr	r1, [pc, #32]	; (8000b60 <__NVIC_SetPriority+0x50>)
 8000b40:	79fb      	ldrb	r3, [r7, #7]
 8000b42:	f003 030f 	and.w	r3, r3, #15
 8000b46:	3b04      	subs	r3, #4
 8000b48:	0112      	lsls	r2, r2, #4
 8000b4a:	b2d2      	uxtb	r2, r2
 8000b4c:	440b      	add	r3, r1
 8000b4e:	761a      	strb	r2, [r3, #24]
}
 8000b50:	bf00      	nop
 8000b52:	370c      	adds	r7, #12
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr
 8000b5c:	e000e100 	.word	0xe000e100
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b089      	sub	sp, #36	; 0x24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	60f8      	str	r0, [r7, #12]
 8000b6c:	60b9      	str	r1, [r7, #8]
 8000b6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b78:	69fb      	ldr	r3, [r7, #28]
 8000b7a:	f1c3 0307 	rsb	r3, r3, #7
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	bf28      	it	cs
 8000b82:	2304      	movcs	r3, #4
 8000b84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b86:	69fb      	ldr	r3, [r7, #28]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	2b06      	cmp	r3, #6
 8000b8c:	d902      	bls.n	8000b94 <NVIC_EncodePriority+0x30>
 8000b8e:	69fb      	ldr	r3, [r7, #28]
 8000b90:	3b03      	subs	r3, #3
 8000b92:	e000      	b.n	8000b96 <NVIC_EncodePriority+0x32>
 8000b94:	2300      	movs	r3, #0
 8000b96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b98:	f04f 32ff 	mov.w	r2, #4294967295
 8000b9c:	69bb      	ldr	r3, [r7, #24]
 8000b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	68bb      	ldr	r3, [r7, #8]
 8000ba6:	401a      	ands	r2, r3
 8000ba8:	697b      	ldr	r3, [r7, #20]
 8000baa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bac:	f04f 31ff 	mov.w	r1, #4294967295
 8000bb0:	697b      	ldr	r3, [r7, #20]
 8000bb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb6:	43d9      	mvns	r1, r3
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bbc:	4313      	orrs	r3, r2
         );
}
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	3724      	adds	r7, #36	; 0x24
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
	...

08000bcc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	3b01      	subs	r3, #1
 8000bd8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bdc:	d301      	bcc.n	8000be2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00f      	b.n	8000c02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <SysTick_Config+0x40>)
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	3b01      	subs	r3, #1
 8000be8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bea:	210f      	movs	r1, #15
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f7ff ff8e 	bl	8000b10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bf4:	4b05      	ldr	r3, [pc, #20]	; (8000c0c <SysTick_Config+0x40>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bfa:	4b04      	ldr	r3, [pc, #16]	; (8000c0c <SysTick_Config+0x40>)
 8000bfc:	2207      	movs	r2, #7
 8000bfe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c00:	2300      	movs	r3, #0
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	e000e010 	.word	0xe000e010

08000c10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c18:	6878      	ldr	r0, [r7, #4]
 8000c1a:	f7ff ff47 	bl	8000aac <__NVIC_SetPriorityGrouping>
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b086      	sub	sp, #24
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000c34:	2300      	movs	r3, #0
 8000c36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c38:	f7ff ff5c 	bl	8000af4 <__NVIC_GetPriorityGrouping>
 8000c3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c3e:	687a      	ldr	r2, [r7, #4]
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	6978      	ldr	r0, [r7, #20]
 8000c44:	f7ff ff8e 	bl	8000b64 <NVIC_EncodePriority>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c4e:	4611      	mov	r1, r2
 8000c50:	4618      	mov	r0, r3
 8000c52:	f7ff ff5d 	bl	8000b10 <__NVIC_SetPriority>
}
 8000c56:	bf00      	nop
 8000c58:	3718      	adds	r7, #24
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}

08000c5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c5e:	b580      	push	{r7, lr}
 8000c60:	b082      	sub	sp, #8
 8000c62:	af00      	add	r7, sp, #0
 8000c64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c66:	6878      	ldr	r0, [r7, #4]
 8000c68:	f7ff ffb0 	bl	8000bcc <SysTick_Config>
 8000c6c:	4603      	mov	r3, r0
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c82:	2300      	movs	r3, #0
 8000c84:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c86:	2300      	movs	r3, #0
 8000c88:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
 8000c92:	e165      	b.n	8000f60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c94:	2201      	movs	r2, #1
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	697a      	ldr	r2, [r7, #20]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000ca8:	693a      	ldr	r2, [r7, #16]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	429a      	cmp	r2, r3
 8000cae:	f040 8154 	bne.w	8000f5a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	2b01      	cmp	r3, #1
 8000cbc:	d005      	beq.n	8000cca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	685b      	ldr	r3, [r3, #4]
 8000cc2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000cc6:	2b02      	cmp	r3, #2
 8000cc8:	d130      	bne.n	8000d2c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	689b      	ldr	r3, [r3, #8]
 8000cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	69ba      	ldr	r2, [r7, #24]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	68da      	ldr	r2, [r3, #12]
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	fa02 f303 	lsl.w	r3, r2, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4313      	orrs	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	69ba      	ldr	r2, [r7, #24]
 8000cf8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d00:	2201      	movs	r2, #1
 8000d02:	69fb      	ldr	r3, [r7, #28]
 8000d04:	fa02 f303 	lsl.w	r3, r2, r3
 8000d08:	43db      	mvns	r3, r3
 8000d0a:	69ba      	ldr	r2, [r7, #24]
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	091b      	lsrs	r3, r3, #4
 8000d16:	f003 0201 	and.w	r2, r3, #1
 8000d1a:	69fb      	ldr	r3, [r7, #28]
 8000d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d20:	69ba      	ldr	r2, [r7, #24]
 8000d22:	4313      	orrs	r3, r2
 8000d24:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	69ba      	ldr	r2, [r7, #24]
 8000d2a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	685b      	ldr	r3, [r3, #4]
 8000d30:	f003 0303 	and.w	r3, r3, #3
 8000d34:	2b03      	cmp	r3, #3
 8000d36:	d017      	beq.n	8000d68 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2203      	movs	r2, #3
 8000d44:	fa02 f303 	lsl.w	r3, r2, r3
 8000d48:	43db      	mvns	r3, r3
 8000d4a:	69ba      	ldr	r2, [r7, #24]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	689a      	ldr	r2, [r3, #8]
 8000d54:	69fb      	ldr	r3, [r7, #28]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5c:	69ba      	ldr	r2, [r7, #24]
 8000d5e:	4313      	orrs	r3, r2
 8000d60:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	685b      	ldr	r3, [r3, #4]
 8000d6c:	f003 0303 	and.w	r3, r3, #3
 8000d70:	2b02      	cmp	r3, #2
 8000d72:	d123      	bne.n	8000dbc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d74:	69fb      	ldr	r3, [r7, #28]
 8000d76:	08da      	lsrs	r2, r3, #3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3208      	adds	r2, #8
 8000d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d82:	69fb      	ldr	r3, [r7, #28]
 8000d84:	f003 0307 	and.w	r3, r3, #7
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	220f      	movs	r2, #15
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	691a      	ldr	r2, [r3, #16]
 8000d9c:	69fb      	ldr	r3, [r7, #28]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	009b      	lsls	r3, r3, #2
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000dae:	69fb      	ldr	r3, [r7, #28]
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3208      	adds	r2, #8
 8000db6:	69b9      	ldr	r1, [r7, #24]
 8000db8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc2:	69fb      	ldr	r3, [r7, #28]
 8000dc4:	005b      	lsls	r3, r3, #1
 8000dc6:	2203      	movs	r2, #3
 8000dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dcc:	43db      	mvns	r3, r3
 8000dce:	69ba      	ldr	r2, [r7, #24]
 8000dd0:	4013      	ands	r3, r2
 8000dd2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	f003 0203 	and.w	r2, r3, #3
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	f000 80ae 	beq.w	8000f5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b5d      	ldr	r3, [pc, #372]	; (8000f78 <HAL_GPIO_Init+0x300>)
 8000e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e06:	4a5c      	ldr	r2, [pc, #368]	; (8000f78 <HAL_GPIO_Init+0x300>)
 8000e08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0e:	4b5a      	ldr	r3, [pc, #360]	; (8000f78 <HAL_GPIO_Init+0x300>)
 8000e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e1a:	4a58      	ldr	r2, [pc, #352]	; (8000f7c <HAL_GPIO_Init+0x304>)
 8000e1c:	69fb      	ldr	r3, [r7, #28]
 8000e1e:	089b      	lsrs	r3, r3, #2
 8000e20:	3302      	adds	r3, #2
 8000e22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0303 	and.w	r3, r3, #3
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	220f      	movs	r2, #15
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43db      	mvns	r3, r3
 8000e38:	69ba      	ldr	r2, [r7, #24]
 8000e3a:	4013      	ands	r3, r2
 8000e3c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	4a4f      	ldr	r2, [pc, #316]	; (8000f80 <HAL_GPIO_Init+0x308>)
 8000e42:	4293      	cmp	r3, r2
 8000e44:	d025      	beq.n	8000e92 <HAL_GPIO_Init+0x21a>
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4a4e      	ldr	r2, [pc, #312]	; (8000f84 <HAL_GPIO_Init+0x30c>)
 8000e4a:	4293      	cmp	r3, r2
 8000e4c:	d01f      	beq.n	8000e8e <HAL_GPIO_Init+0x216>
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a4d      	ldr	r2, [pc, #308]	; (8000f88 <HAL_GPIO_Init+0x310>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d019      	beq.n	8000e8a <HAL_GPIO_Init+0x212>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	4a4c      	ldr	r2, [pc, #304]	; (8000f8c <HAL_GPIO_Init+0x314>)
 8000e5a:	4293      	cmp	r3, r2
 8000e5c:	d013      	beq.n	8000e86 <HAL_GPIO_Init+0x20e>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	4a4b      	ldr	r2, [pc, #300]	; (8000f90 <HAL_GPIO_Init+0x318>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d00d      	beq.n	8000e82 <HAL_GPIO_Init+0x20a>
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	4a4a      	ldr	r2, [pc, #296]	; (8000f94 <HAL_GPIO_Init+0x31c>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d007      	beq.n	8000e7e <HAL_GPIO_Init+0x206>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	4a49      	ldr	r2, [pc, #292]	; (8000f98 <HAL_GPIO_Init+0x320>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d101      	bne.n	8000e7a <HAL_GPIO_Init+0x202>
 8000e76:	2306      	movs	r3, #6
 8000e78:	e00c      	b.n	8000e94 <HAL_GPIO_Init+0x21c>
 8000e7a:	2307      	movs	r3, #7
 8000e7c:	e00a      	b.n	8000e94 <HAL_GPIO_Init+0x21c>
 8000e7e:	2305      	movs	r3, #5
 8000e80:	e008      	b.n	8000e94 <HAL_GPIO_Init+0x21c>
 8000e82:	2304      	movs	r3, #4
 8000e84:	e006      	b.n	8000e94 <HAL_GPIO_Init+0x21c>
 8000e86:	2303      	movs	r3, #3
 8000e88:	e004      	b.n	8000e94 <HAL_GPIO_Init+0x21c>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	e002      	b.n	8000e94 <HAL_GPIO_Init+0x21c>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <HAL_GPIO_Init+0x21c>
 8000e92:	2300      	movs	r3, #0
 8000e94:	69fa      	ldr	r2, [r7, #28]
 8000e96:	f002 0203 	and.w	r2, r2, #3
 8000e9a:	0092      	lsls	r2, r2, #2
 8000e9c:	4093      	lsls	r3, r2
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000ea4:	4935      	ldr	r1, [pc, #212]	; (8000f7c <HAL_GPIO_Init+0x304>)
 8000ea6:	69fb      	ldr	r3, [r7, #28]
 8000ea8:	089b      	lsrs	r3, r3, #2
 8000eaa:	3302      	adds	r3, #2
 8000eac:	69ba      	ldr	r2, [r7, #24]
 8000eae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000eb2:	4b3a      	ldr	r3, [pc, #232]	; (8000f9c <HAL_GPIO_Init+0x324>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb8:	693b      	ldr	r3, [r7, #16]
 8000eba:	43db      	mvns	r3, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4013      	ands	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d003      	beq.n	8000ed6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000ece:	69ba      	ldr	r2, [r7, #24]
 8000ed0:	693b      	ldr	r3, [r7, #16]
 8000ed2:	4313      	orrs	r3, r2
 8000ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ed6:	4a31      	ldr	r2, [pc, #196]	; (8000f9c <HAL_GPIO_Init+0x324>)
 8000ed8:	69bb      	ldr	r3, [r7, #24]
 8000eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000edc:	4b2f      	ldr	r3, [pc, #188]	; (8000f9c <HAL_GPIO_Init+0x324>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	43db      	mvns	r3, r3
 8000ee6:	69ba      	ldr	r2, [r7, #24]
 8000ee8:	4013      	ands	r3, r2
 8000eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000eec:	683b      	ldr	r3, [r7, #0]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	693b      	ldr	r3, [r7, #16]
 8000efc:	4313      	orrs	r3, r2
 8000efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f00:	4a26      	ldr	r2, [pc, #152]	; (8000f9c <HAL_GPIO_Init+0x324>)
 8000f02:	69bb      	ldr	r3, [r7, #24]
 8000f04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f06:	4b25      	ldr	r3, [pc, #148]	; (8000f9c <HAL_GPIO_Init+0x324>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f0c:	693b      	ldr	r3, [r7, #16]
 8000f0e:	43db      	mvns	r3, r3
 8000f10:	69ba      	ldr	r2, [r7, #24]
 8000f12:	4013      	ands	r3, r2
 8000f14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d003      	beq.n	8000f2a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000f22:	69ba      	ldr	r2, [r7, #24]
 8000f24:	693b      	ldr	r3, [r7, #16]
 8000f26:	4313      	orrs	r3, r2
 8000f28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000f2a:	4a1c      	ldr	r2, [pc, #112]	; (8000f9c <HAL_GPIO_Init+0x324>)
 8000f2c:	69bb      	ldr	r3, [r7, #24]
 8000f2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000f30:	4b1a      	ldr	r3, [pc, #104]	; (8000f9c <HAL_GPIO_Init+0x324>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f36:	693b      	ldr	r3, [r7, #16]
 8000f38:	43db      	mvns	r3, r3
 8000f3a:	69ba      	ldr	r2, [r7, #24]
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	693b      	ldr	r3, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f54:	4a11      	ldr	r2, [pc, #68]	; (8000f9c <HAL_GPIO_Init+0x324>)
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	3301      	adds	r3, #1
 8000f5e:	61fb      	str	r3, [r7, #28]
 8000f60:	69fb      	ldr	r3, [r7, #28]
 8000f62:	2b0f      	cmp	r3, #15
 8000f64:	f67f ae96 	bls.w	8000c94 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f68:	bf00      	nop
 8000f6a:	bf00      	nop
 8000f6c:	3724      	adds	r7, #36	; 0x24
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop
 8000f78:	40023800 	.word	0x40023800
 8000f7c:	40013800 	.word	0x40013800
 8000f80:	40020000 	.word	0x40020000
 8000f84:	40020400 	.word	0x40020400
 8000f88:	40020800 	.word	0x40020800
 8000f8c:	40020c00 	.word	0x40020c00
 8000f90:	40021000 	.word	0x40021000
 8000f94:	40021400 	.word	0x40021400
 8000f98:	40021800 	.word	0x40021800
 8000f9c:	40013c00 	.word	0x40013c00

08000fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b085      	sub	sp, #20
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
 8000fa8:	460b      	mov	r3, r1
 8000faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	691a      	ldr	r2, [r3, #16]
 8000fb0:	887b      	ldrh	r3, [r7, #2]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	73fb      	strb	r3, [r7, #15]
 8000fbc:	e001      	b.n	8000fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	460b      	mov	r3, r1
 8000fda:	807b      	strh	r3, [r7, #2]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000fe0:	787b      	ldrb	r3, [r7, #1]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d003      	beq.n	8000fee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fe6:	887a      	ldrh	r2, [r7, #2]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000fec:	e003      	b.n	8000ff6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000fee:	887b      	ldrh	r3, [r7, #2]
 8000ff0:	041a      	lsls	r2, r3, #16
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	619a      	str	r2, [r3, #24]
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
	...

08001004 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d101      	bne.n	8001018 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001014:	2301      	movs	r3, #1
 8001016:	e0cc      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001018:	4b68      	ldr	r3, [pc, #416]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f003 030f 	and.w	r3, r3, #15
 8001020:	683a      	ldr	r2, [r7, #0]
 8001022:	429a      	cmp	r2, r3
 8001024:	d90c      	bls.n	8001040 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001026:	4b65      	ldr	r3, [pc, #404]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001028:	683a      	ldr	r2, [r7, #0]
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800102e:	4b63      	ldr	r3, [pc, #396]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f003 030f 	and.w	r3, r3, #15
 8001036:	683a      	ldr	r2, [r7, #0]
 8001038:	429a      	cmp	r2, r3
 800103a:	d001      	beq.n	8001040 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800103c:	2301      	movs	r3, #1
 800103e:	e0b8      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	f003 0302 	and.w	r3, r3, #2
 8001048:	2b00      	cmp	r3, #0
 800104a:	d020      	beq.n	800108e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	f003 0304 	and.w	r3, r3, #4
 8001054:	2b00      	cmp	r3, #0
 8001056:	d005      	beq.n	8001064 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001058:	4b59      	ldr	r3, [pc, #356]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800105a:	689b      	ldr	r3, [r3, #8]
 800105c:	4a58      	ldr	r2, [pc, #352]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800105e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001062:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0308 	and.w	r3, r3, #8
 800106c:	2b00      	cmp	r3, #0
 800106e:	d005      	beq.n	800107c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001070:	4b53      	ldr	r3, [pc, #332]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	4a52      	ldr	r2, [pc, #328]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001076:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800107a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800107c:	4b50      	ldr	r3, [pc, #320]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	689b      	ldr	r3, [r3, #8]
 8001088:	494d      	ldr	r1, [pc, #308]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800108a:	4313      	orrs	r3, r2
 800108c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	2b00      	cmp	r3, #0
 8001098:	d044      	beq.n	8001124 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d107      	bne.n	80010b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a2:	4b47      	ldr	r3, [pc, #284]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d119      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e07f      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d003      	beq.n	80010c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d107      	bne.n	80010d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80010c2:	4b3f      	ldr	r3, [pc, #252]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d109      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
 80010d0:	e06f      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010d2:	4b3b      	ldr	r3, [pc, #236]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f003 0302 	and.w	r3, r3, #2
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d101      	bne.n	80010e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80010de:	2301      	movs	r3, #1
 80010e0:	e067      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80010e2:	4b37      	ldr	r3, [pc, #220]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	f023 0203 	bic.w	r2, r3, #3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	685b      	ldr	r3, [r3, #4]
 80010ee:	4934      	ldr	r1, [pc, #208]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	4313      	orrs	r3, r2
 80010f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80010f4:	f7ff fcce 	bl	8000a94 <HAL_GetTick>
 80010f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80010fa:	e00a      	b.n	8001112 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80010fc:	f7ff fcca 	bl	8000a94 <HAL_GetTick>
 8001100:	4602      	mov	r2, r0
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	1ad3      	subs	r3, r2, r3
 8001106:	f241 3288 	movw	r2, #5000	; 0x1388
 800110a:	4293      	cmp	r3, r2
 800110c:	d901      	bls.n	8001112 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e04f      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001112:	4b2b      	ldr	r3, [pc, #172]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 020c 	and.w	r2, r3, #12
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	429a      	cmp	r2, r3
 8001122:	d1eb      	bne.n	80010fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001124:	4b25      	ldr	r3, [pc, #148]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 030f 	and.w	r3, r3, #15
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d20c      	bcs.n	800114c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001132:	4b22      	ldr	r3, [pc, #136]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113a:	4b20      	ldr	r3, [pc, #128]	; (80011bc <HAL_RCC_ClockConfig+0x1b8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 030f 	and.w	r3, r3, #15
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e032      	b.n	80011b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0304 	and.w	r3, r3, #4
 8001154:	2b00      	cmp	r3, #0
 8001156:	d008      	beq.n	800116a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001158:	4b19      	ldr	r3, [pc, #100]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 800115a:	689b      	ldr	r3, [r3, #8]
 800115c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	68db      	ldr	r3, [r3, #12]
 8001164:	4916      	ldr	r1, [pc, #88]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	4313      	orrs	r3, r2
 8001168:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f003 0308 	and.w	r3, r3, #8
 8001172:	2b00      	cmp	r3, #0
 8001174:	d009      	beq.n	800118a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001176:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	691b      	ldr	r3, [r3, #16]
 8001182:	00db      	lsls	r3, r3, #3
 8001184:	490e      	ldr	r1, [pc, #56]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001186:	4313      	orrs	r3, r2
 8001188:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800118a:	f000 f821 	bl	80011d0 <HAL_RCC_GetSysClockFreq>
 800118e:	4602      	mov	r2, r0
 8001190:	4b0b      	ldr	r3, [pc, #44]	; (80011c0 <HAL_RCC_ClockConfig+0x1bc>)
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	091b      	lsrs	r3, r3, #4
 8001196:	f003 030f 	and.w	r3, r3, #15
 800119a:	490a      	ldr	r1, [pc, #40]	; (80011c4 <HAL_RCC_ClockConfig+0x1c0>)
 800119c:	5ccb      	ldrb	r3, [r1, r3]
 800119e:	fa22 f303 	lsr.w	r3, r2, r3
 80011a2:	4a09      	ldr	r2, [pc, #36]	; (80011c8 <HAL_RCC_ClockConfig+0x1c4>)
 80011a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80011a6:	4b09      	ldr	r3, [pc, #36]	; (80011cc <HAL_RCC_ClockConfig+0x1c8>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fc2e 	bl	8000a0c <HAL_InitTick>

  return HAL_OK;
 80011b0:	2300      	movs	r3, #0
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	40023c00 	.word	0x40023c00
 80011c0:	40023800 	.word	0x40023800
 80011c4:	08002f84 	.word	0x08002f84
 80011c8:	20000000 	.word	0x20000000
 80011cc:	20000004 	.word	0x20000004

080011d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011d4:	b0a6      	sub	sp, #152	; 0x98
 80011d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011d8:	2300      	movs	r3, #0
 80011da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t pllvco = 0U;
 80011de:	2300      	movs	r3, #0
 80011e0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t pllp = 0U;
 80011e4:	2300      	movs	r3, #0
 80011e6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  uint32_t pllr = 0U;
 80011ea:	2300      	movs	r3, #0
 80011ec:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  uint32_t sysclockfreq = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80011f6:	4bc8      	ldr	r3, [pc, #800]	; (8001518 <HAL_RCC_GetSysClockFreq+0x348>)
 80011f8:	689b      	ldr	r3, [r3, #8]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b0c      	cmp	r3, #12
 8001200:	f200 817e 	bhi.w	8001500 <HAL_RCC_GetSysClockFreq+0x330>
 8001204:	a201      	add	r2, pc, #4	; (adr r2, 800120c <HAL_RCC_GetSysClockFreq+0x3c>)
 8001206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800120a:	bf00      	nop
 800120c:	08001241 	.word	0x08001241
 8001210:	08001501 	.word	0x08001501
 8001214:	08001501 	.word	0x08001501
 8001218:	08001501 	.word	0x08001501
 800121c:	08001249 	.word	0x08001249
 8001220:	08001501 	.word	0x08001501
 8001224:	08001501 	.word	0x08001501
 8001228:	08001501 	.word	0x08001501
 800122c:	08001251 	.word	0x08001251
 8001230:	08001501 	.word	0x08001501
 8001234:	08001501 	.word	0x08001501
 8001238:	08001501 	.word	0x08001501
 800123c:	080013bb 	.word	0x080013bb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001240:	4bb6      	ldr	r3, [pc, #728]	; (800151c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001242:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
       break;
 8001246:	e15f      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001248:	4bb5      	ldr	r3, [pc, #724]	; (8001520 <HAL_RCC_GetSysClockFreq+0x350>)
 800124a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 800124e:	e15b      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001250:	4bb1      	ldr	r3, [pc, #708]	; (8001518 <HAL_RCC_GetSysClockFreq+0x348>)
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001258:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800125c:	4bae      	ldr	r3, [pc, #696]	; (8001518 <HAL_RCC_GetSysClockFreq+0x348>)
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001264:	2b00      	cmp	r3, #0
 8001266:	d031      	beq.n	80012cc <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001268:	4bab      	ldr	r3, [pc, #684]	; (8001518 <HAL_RCC_GetSysClockFreq+0x348>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	099b      	lsrs	r3, r3, #6
 800126e:	2200      	movs	r2, #0
 8001270:	66bb      	str	r3, [r7, #104]	; 0x68
 8001272:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001274:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001276:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800127a:	663b      	str	r3, [r7, #96]	; 0x60
 800127c:	2300      	movs	r3, #0
 800127e:	667b      	str	r3, [r7, #100]	; 0x64
 8001280:	4ba7      	ldr	r3, [pc, #668]	; (8001520 <HAL_RCC_GetSysClockFreq+0x350>)
 8001282:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001286:	462a      	mov	r2, r5
 8001288:	fb03 f202 	mul.w	r2, r3, r2
 800128c:	2300      	movs	r3, #0
 800128e:	4621      	mov	r1, r4
 8001290:	fb01 f303 	mul.w	r3, r1, r3
 8001294:	4413      	add	r3, r2
 8001296:	4aa2      	ldr	r2, [pc, #648]	; (8001520 <HAL_RCC_GetSysClockFreq+0x350>)
 8001298:	4621      	mov	r1, r4
 800129a:	fba1 1202 	umull	r1, r2, r1, r2
 800129e:	67fa      	str	r2, [r7, #124]	; 0x7c
 80012a0:	460a      	mov	r2, r1
 80012a2:	67ba      	str	r2, [r7, #120]	; 0x78
 80012a4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80012a6:	4413      	add	r3, r2
 80012a8:	67fb      	str	r3, [r7, #124]	; 0x7c
 80012aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80012ae:	2200      	movs	r2, #0
 80012b0:	65bb      	str	r3, [r7, #88]	; 0x58
 80012b2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80012b4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80012b8:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	; 0x78
 80012bc:	f7fe ffa8 	bl	8000210 <__aeabi_uldivmod>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4613      	mov	r3, r2
 80012c6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012ca:	e064      	b.n	8001396 <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012cc:	4b92      	ldr	r3, [pc, #584]	; (8001518 <HAL_RCC_GetSysClockFreq+0x348>)
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	099b      	lsrs	r3, r3, #6
 80012d2:	2200      	movs	r2, #0
 80012d4:	653b      	str	r3, [r7, #80]	; 0x50
 80012d6:	657a      	str	r2, [r7, #84]	; 0x54
 80012d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80012da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012de:	64bb      	str	r3, [r7, #72]	; 0x48
 80012e0:	2300      	movs	r3, #0
 80012e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012e4:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	; 0x48
 80012e8:	4622      	mov	r2, r4
 80012ea:	462b      	mov	r3, r5
 80012ec:	f04f 0000 	mov.w	r0, #0
 80012f0:	f04f 0100 	mov.w	r1, #0
 80012f4:	0159      	lsls	r1, r3, #5
 80012f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012fa:	0150      	lsls	r0, r2, #5
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4621      	mov	r1, r4
 8001302:	1a51      	subs	r1, r2, r1
 8001304:	6139      	str	r1, [r7, #16]
 8001306:	4629      	mov	r1, r5
 8001308:	eb63 0301 	sbc.w	r3, r3, r1
 800130c:	617b      	str	r3, [r7, #20]
 800130e:	f04f 0200 	mov.w	r2, #0
 8001312:	f04f 0300 	mov.w	r3, #0
 8001316:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800131a:	4659      	mov	r1, fp
 800131c:	018b      	lsls	r3, r1, #6
 800131e:	4651      	mov	r1, sl
 8001320:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001324:	4651      	mov	r1, sl
 8001326:	018a      	lsls	r2, r1, #6
 8001328:	4651      	mov	r1, sl
 800132a:	ebb2 0801 	subs.w	r8, r2, r1
 800132e:	4659      	mov	r1, fp
 8001330:	eb63 0901 	sbc.w	r9, r3, r1
 8001334:	f04f 0200 	mov.w	r2, #0
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001340:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001344:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001348:	4690      	mov	r8, r2
 800134a:	4699      	mov	r9, r3
 800134c:	4623      	mov	r3, r4
 800134e:	eb18 0303 	adds.w	r3, r8, r3
 8001352:	60bb      	str	r3, [r7, #8]
 8001354:	462b      	mov	r3, r5
 8001356:	eb49 0303 	adc.w	r3, r9, r3
 800135a:	60fb      	str	r3, [r7, #12]
 800135c:	f04f 0200 	mov.w	r2, #0
 8001360:	f04f 0300 	mov.w	r3, #0
 8001364:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001368:	4629      	mov	r1, r5
 800136a:	028b      	lsls	r3, r1, #10
 800136c:	4621      	mov	r1, r4
 800136e:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001372:	4621      	mov	r1, r4
 8001374:	028a      	lsls	r2, r1, #10
 8001376:	4610      	mov	r0, r2
 8001378:	4619      	mov	r1, r3
 800137a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800137e:	2200      	movs	r2, #0
 8001380:	643b      	str	r3, [r7, #64]	; 0x40
 8001382:	647a      	str	r2, [r7, #68]	; 0x44
 8001384:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001388:	f7fe ff42 	bl	8000210 <__aeabi_uldivmod>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4613      	mov	r3, r2
 8001392:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001396:	4b60      	ldr	r3, [pc, #384]	; (8001518 <HAL_RCC_GetSysClockFreq+0x348>)
 8001398:	685b      	ldr	r3, [r3, #4]
 800139a:	0c1b      	lsrs	r3, r3, #16
 800139c:	f003 0303 	and.w	r3, r3, #3
 80013a0:	3301      	adds	r3, #1
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

      sysclockfreq = pllvco/pllp;
 80013a8:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80013ac:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80013b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80013b4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80013b8:	e0a6      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80013ba:	4b57      	ldr	r3, [pc, #348]	; (8001518 <HAL_RCC_GetSysClockFreq+0x348>)
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80013c6:	4b54      	ldr	r3, [pc, #336]	; (8001518 <HAL_RCC_GetSysClockFreq+0x348>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d02a      	beq.n	8001428 <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013d2:	4b51      	ldr	r3, [pc, #324]	; (8001518 <HAL_RCC_GetSysClockFreq+0x348>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	099b      	lsrs	r3, r3, #6
 80013d8:	2200      	movs	r2, #0
 80013da:	63bb      	str	r3, [r7, #56]	; 0x38
 80013dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80013de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80013e0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80013e4:	2100      	movs	r1, #0
 80013e6:	4b4e      	ldr	r3, [pc, #312]	; (8001520 <HAL_RCC_GetSysClockFreq+0x350>)
 80013e8:	fb03 f201 	mul.w	r2, r3, r1
 80013ec:	2300      	movs	r3, #0
 80013ee:	fb00 f303 	mul.w	r3, r0, r3
 80013f2:	4413      	add	r3, r2
 80013f4:	4a4a      	ldr	r2, [pc, #296]	; (8001520 <HAL_RCC_GetSysClockFreq+0x350>)
 80013f6:	fba0 1202 	umull	r1, r2, r0, r2
 80013fa:	677a      	str	r2, [r7, #116]	; 0x74
 80013fc:	460a      	mov	r2, r1
 80013fe:	673a      	str	r2, [r7, #112]	; 0x70
 8001400:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001402:	4413      	add	r3, r2
 8001404:	677b      	str	r3, [r7, #116]	; 0x74
 8001406:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800140a:	2200      	movs	r2, #0
 800140c:	633b      	str	r3, [r7, #48]	; 0x30
 800140e:	637a      	str	r2, [r7, #52]	; 0x34
 8001410:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8001414:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8001418:	f7fe fefa 	bl	8000210 <__aeabi_uldivmod>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	4613      	mov	r3, r2
 8001422:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8001426:	e05b      	b.n	80014e0 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001428:	4b3b      	ldr	r3, [pc, #236]	; (8001518 <HAL_RCC_GetSysClockFreq+0x348>)
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	099b      	lsrs	r3, r3, #6
 800142e:	2200      	movs	r2, #0
 8001430:	62bb      	str	r3, [r7, #40]	; 0x28
 8001432:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001436:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800143a:	623b      	str	r3, [r7, #32]
 800143c:	2300      	movs	r3, #0
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
 8001440:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001444:	4642      	mov	r2, r8
 8001446:	464b      	mov	r3, r9
 8001448:	f04f 0000 	mov.w	r0, #0
 800144c:	f04f 0100 	mov.w	r1, #0
 8001450:	0159      	lsls	r1, r3, #5
 8001452:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001456:	0150      	lsls	r0, r2, #5
 8001458:	4602      	mov	r2, r0
 800145a:	460b      	mov	r3, r1
 800145c:	4641      	mov	r1, r8
 800145e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001462:	4649      	mov	r1, r9
 8001464:	eb63 0b01 	sbc.w	fp, r3, r1
 8001468:	f04f 0200 	mov.w	r2, #0
 800146c:	f04f 0300 	mov.w	r3, #0
 8001470:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001474:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001478:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800147c:	ebb2 040a 	subs.w	r4, r2, sl
 8001480:	eb63 050b 	sbc.w	r5, r3, fp
 8001484:	f04f 0200 	mov.w	r2, #0
 8001488:	f04f 0300 	mov.w	r3, #0
 800148c:	00eb      	lsls	r3, r5, #3
 800148e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001492:	00e2      	lsls	r2, r4, #3
 8001494:	4614      	mov	r4, r2
 8001496:	461d      	mov	r5, r3
 8001498:	4643      	mov	r3, r8
 800149a:	18e3      	adds	r3, r4, r3
 800149c:	603b      	str	r3, [r7, #0]
 800149e:	464b      	mov	r3, r9
 80014a0:	eb45 0303 	adc.w	r3, r5, r3
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	f04f 0200 	mov.w	r2, #0
 80014aa:	f04f 0300 	mov.w	r3, #0
 80014ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80014b2:	4629      	mov	r1, r5
 80014b4:	028b      	lsls	r3, r1, #10
 80014b6:	4621      	mov	r1, r4
 80014b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80014bc:	4621      	mov	r1, r4
 80014be:	028a      	lsls	r2, r1, #10
 80014c0:	4610      	mov	r0, r2
 80014c2:	4619      	mov	r1, r3
 80014c4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80014c8:	2200      	movs	r2, #0
 80014ca:	61bb      	str	r3, [r7, #24]
 80014cc:	61fa      	str	r2, [r7, #28]
 80014ce:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014d2:	f7fe fe9d 	bl	8000210 <__aeabi_uldivmod>
 80014d6:	4602      	mov	r2, r0
 80014d8:	460b      	mov	r3, r1
 80014da:	4613      	mov	r3, r2
 80014dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80014e0:	4b0d      	ldr	r3, [pc, #52]	; (8001518 <HAL_RCC_GetSysClockFreq+0x348>)
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	0f1b      	lsrs	r3, r3, #28
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

      sysclockfreq = pllvco/pllr;
 80014ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80014f2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80014f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80014fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 80014fe:	e003      	b.n	8001508 <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <HAL_RCC_GetSysClockFreq+0x34c>)
 8001502:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
      break;
 8001506:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001508:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
}
 800150c:	4618      	mov	r0, r3
 800150e:	3798      	adds	r7, #152	; 0x98
 8001510:	46bd      	mov	sp, r7
 8001512:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	00f42400 	.word	0x00f42400
 8001520:	017d7840 	.word	0x017d7840

08001524 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d101      	bne.n	8001536 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e28d      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	2b00      	cmp	r3, #0
 8001540:	f000 8083 	beq.w	800164a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001544:	4b94      	ldr	r3, [pc, #592]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 030c 	and.w	r3, r3, #12
 800154c:	2b04      	cmp	r3, #4
 800154e:	d019      	beq.n	8001584 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001550:	4b91      	ldr	r3, [pc, #580]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001558:	2b08      	cmp	r3, #8
 800155a:	d106      	bne.n	800156a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800155c:	4b8e      	ldr	r3, [pc, #568]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001564:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001568:	d00c      	beq.n	8001584 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800156a:	4b8b      	ldr	r3, [pc, #556]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001572:	2b0c      	cmp	r3, #12
 8001574:	d112      	bne.n	800159c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001576:	4b88      	ldr	r3, [pc, #544]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800157e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001582:	d10b      	bne.n	800159c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001584:	4b84      	ldr	r3, [pc, #528]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800158c:	2b00      	cmp	r3, #0
 800158e:	d05b      	beq.n	8001648 <HAL_RCC_OscConfig+0x124>
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d157      	bne.n	8001648 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e25a      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015a4:	d106      	bne.n	80015b4 <HAL_RCC_OscConfig+0x90>
 80015a6:	4b7c      	ldr	r3, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	4a7b      	ldr	r2, [pc, #492]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80015ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b0:	6013      	str	r3, [r2, #0]
 80015b2:	e01d      	b.n	80015f0 <HAL_RCC_OscConfig+0xcc>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015bc:	d10c      	bne.n	80015d8 <HAL_RCC_OscConfig+0xb4>
 80015be:	4b76      	ldr	r3, [pc, #472]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a75      	ldr	r2, [pc, #468]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80015c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c8:	6013      	str	r3, [r2, #0]
 80015ca:	4b73      	ldr	r3, [pc, #460]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a72      	ldr	r2, [pc, #456]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80015d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	e00b      	b.n	80015f0 <HAL_RCC_OscConfig+0xcc>
 80015d8:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a6e      	ldr	r2, [pc, #440]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80015de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015e2:	6013      	str	r3, [r2, #0]
 80015e4:	4b6c      	ldr	r3, [pc, #432]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a6b      	ldr	r2, [pc, #428]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80015ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	685b      	ldr	r3, [r3, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d013      	beq.n	8001620 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015f8:	f7ff fa4c 	bl	8000a94 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	e008      	b.n	8001612 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001600:	f7ff fa48 	bl	8000a94 <HAL_GetTick>
 8001604:	4602      	mov	r2, r0
 8001606:	693b      	ldr	r3, [r7, #16]
 8001608:	1ad3      	subs	r3, r2, r3
 800160a:	2b64      	cmp	r3, #100	; 0x64
 800160c:	d901      	bls.n	8001612 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800160e:	2303      	movs	r3, #3
 8001610:	e21f      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001612:	4b61      	ldr	r3, [pc, #388]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f0      	beq.n	8001600 <HAL_RCC_OscConfig+0xdc>
 800161e:	e014      	b.n	800164a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001620:	f7ff fa38 	bl	8000a94 <HAL_GetTick>
 8001624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001626:	e008      	b.n	800163a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001628:	f7ff fa34 	bl	8000a94 <HAL_GetTick>
 800162c:	4602      	mov	r2, r0
 800162e:	693b      	ldr	r3, [r7, #16]
 8001630:	1ad3      	subs	r3, r2, r3
 8001632:	2b64      	cmp	r3, #100	; 0x64
 8001634:	d901      	bls.n	800163a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001636:	2303      	movs	r3, #3
 8001638:	e20b      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800163a:	4b57      	ldr	r3, [pc, #348]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001642:	2b00      	cmp	r3, #0
 8001644:	d1f0      	bne.n	8001628 <HAL_RCC_OscConfig+0x104>
 8001646:	e000      	b.n	800164a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d06f      	beq.n	8001736 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001656:	4b50      	ldr	r3, [pc, #320]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f003 030c 	and.w	r3, r3, #12
 800165e:	2b00      	cmp	r3, #0
 8001660:	d017      	beq.n	8001692 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001662:	4b4d      	ldr	r3, [pc, #308]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001664:	689b      	ldr	r3, [r3, #8]
 8001666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800166a:	2b08      	cmp	r3, #8
 800166c:	d105      	bne.n	800167a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800166e:	4b4a      	ldr	r3, [pc, #296]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d00b      	beq.n	8001692 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800167a:	4b47      	ldr	r3, [pc, #284]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001682:	2b0c      	cmp	r3, #12
 8001684:	d11c      	bne.n	80016c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001686:	4b44      	ldr	r3, [pc, #272]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d116      	bne.n	80016c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b00      	cmp	r3, #0
 800169c:	d005      	beq.n	80016aa <HAL_RCC_OscConfig+0x186>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d001      	beq.n	80016aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e1d3      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016aa:	4b3b      	ldr	r3, [pc, #236]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	691b      	ldr	r3, [r3, #16]
 80016b6:	00db      	lsls	r3, r3, #3
 80016b8:	4937      	ldr	r1, [pc, #220]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80016ba:	4313      	orrs	r3, r2
 80016bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016be:	e03a      	b.n	8001736 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	68db      	ldr	r3, [r3, #12]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d020      	beq.n	800170a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016c8:	4b34      	ldr	r3, [pc, #208]	; (800179c <HAL_RCC_OscConfig+0x278>)
 80016ca:	2201      	movs	r2, #1
 80016cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ce:	f7ff f9e1 	bl	8000a94 <HAL_GetTick>
 80016d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016d4:	e008      	b.n	80016e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d6:	f7ff f9dd 	bl	8000a94 <HAL_GetTick>
 80016da:	4602      	mov	r2, r0
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	2b02      	cmp	r3, #2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e1b4      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016e8:	4b2b      	ldr	r3, [pc, #172]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d0f0      	beq.n	80016d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f4:	4b28      	ldr	r3, [pc, #160]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	691b      	ldr	r3, [r3, #16]
 8001700:	00db      	lsls	r3, r3, #3
 8001702:	4925      	ldr	r1, [pc, #148]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
 8001708:	e015      	b.n	8001736 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800170a:	4b24      	ldr	r3, [pc, #144]	; (800179c <HAL_RCC_OscConfig+0x278>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001710:	f7ff f9c0 	bl	8000a94 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001718:	f7ff f9bc 	bl	8000a94 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e193      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800172a:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f003 0308 	and.w	r3, r3, #8
 800173e:	2b00      	cmp	r3, #0
 8001740:	d036      	beq.n	80017b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	695b      	ldr	r3, [r3, #20]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d016      	beq.n	8001778 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <HAL_RCC_OscConfig+0x27c>)
 800174c:	2201      	movs	r2, #1
 800174e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001750:	f7ff f9a0 	bl	8000a94 <HAL_GetTick>
 8001754:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001756:	e008      	b.n	800176a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001758:	f7ff f99c 	bl	8000a94 <HAL_GetTick>
 800175c:	4602      	mov	r2, r0
 800175e:	693b      	ldr	r3, [r7, #16]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	2b02      	cmp	r3, #2
 8001764:	d901      	bls.n	800176a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001766:	2303      	movs	r3, #3
 8001768:	e173      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800176a:	4b0b      	ldr	r3, [pc, #44]	; (8001798 <HAL_RCC_OscConfig+0x274>)
 800176c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b00      	cmp	r3, #0
 8001774:	d0f0      	beq.n	8001758 <HAL_RCC_OscConfig+0x234>
 8001776:	e01b      	b.n	80017b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001778:	4b09      	ldr	r3, [pc, #36]	; (80017a0 <HAL_RCC_OscConfig+0x27c>)
 800177a:	2200      	movs	r2, #0
 800177c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800177e:	f7ff f989 	bl	8000a94 <HAL_GetTick>
 8001782:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001784:	e00e      	b.n	80017a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001786:	f7ff f985 	bl	8000a94 <HAL_GetTick>
 800178a:	4602      	mov	r2, r0
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	1ad3      	subs	r3, r2, r3
 8001790:	2b02      	cmp	r3, #2
 8001792:	d907      	bls.n	80017a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001794:	2303      	movs	r3, #3
 8001796:	e15c      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
 8001798:	40023800 	.word	0x40023800
 800179c:	42470000 	.word	0x42470000
 80017a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017a4:	4b8a      	ldr	r3, [pc, #552]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 80017a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d1ea      	bne.n	8001786 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f003 0304 	and.w	r3, r3, #4
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	f000 8097 	beq.w	80018ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80017c2:	4b83      	ldr	r3, [pc, #524]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 80017c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d10f      	bne.n	80017ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60bb      	str	r3, [r7, #8]
 80017d2:	4b7f      	ldr	r3, [pc, #508]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 80017d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d6:	4a7e      	ldr	r2, [pc, #504]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 80017d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017dc:	6413      	str	r3, [r2, #64]	; 0x40
 80017de:	4b7c      	ldr	r3, [pc, #496]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 80017e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017e6:	60bb      	str	r3, [r7, #8]
 80017e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017ea:	2301      	movs	r3, #1
 80017ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017ee:	4b79      	ldr	r3, [pc, #484]	; (80019d4 <HAL_RCC_OscConfig+0x4b0>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d118      	bne.n	800182c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017fa:	4b76      	ldr	r3, [pc, #472]	; (80019d4 <HAL_RCC_OscConfig+0x4b0>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a75      	ldr	r2, [pc, #468]	; (80019d4 <HAL_RCC_OscConfig+0x4b0>)
 8001800:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001804:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001806:	f7ff f945 	bl	8000a94 <HAL_GetTick>
 800180a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800180c:	e008      	b.n	8001820 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800180e:	f7ff f941 	bl	8000a94 <HAL_GetTick>
 8001812:	4602      	mov	r2, r0
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	1ad3      	subs	r3, r2, r3
 8001818:	2b02      	cmp	r3, #2
 800181a:	d901      	bls.n	8001820 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800181c:	2303      	movs	r3, #3
 800181e:	e118      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001820:	4b6c      	ldr	r3, [pc, #432]	; (80019d4 <HAL_RCC_OscConfig+0x4b0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001828:	2b00      	cmp	r3, #0
 800182a:	d0f0      	beq.n	800180e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d106      	bne.n	8001842 <HAL_RCC_OscConfig+0x31e>
 8001834:	4b66      	ldr	r3, [pc, #408]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 8001836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001838:	4a65      	ldr	r2, [pc, #404]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 800183a:	f043 0301 	orr.w	r3, r3, #1
 800183e:	6713      	str	r3, [r2, #112]	; 0x70
 8001840:	e01c      	b.n	800187c <HAL_RCC_OscConfig+0x358>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	2b05      	cmp	r3, #5
 8001848:	d10c      	bne.n	8001864 <HAL_RCC_OscConfig+0x340>
 800184a:	4b61      	ldr	r3, [pc, #388]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800184e:	4a60      	ldr	r2, [pc, #384]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 8001850:	f043 0304 	orr.w	r3, r3, #4
 8001854:	6713      	str	r3, [r2, #112]	; 0x70
 8001856:	4b5e      	ldr	r3, [pc, #376]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 8001858:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800185a:	4a5d      	ldr	r2, [pc, #372]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6713      	str	r3, [r2, #112]	; 0x70
 8001862:	e00b      	b.n	800187c <HAL_RCC_OscConfig+0x358>
 8001864:	4b5a      	ldr	r3, [pc, #360]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 8001866:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001868:	4a59      	ldr	r2, [pc, #356]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 800186a:	f023 0301 	bic.w	r3, r3, #1
 800186e:	6713      	str	r3, [r2, #112]	; 0x70
 8001870:	4b57      	ldr	r3, [pc, #348]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 8001872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001874:	4a56      	ldr	r2, [pc, #344]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 8001876:	f023 0304 	bic.w	r3, r3, #4
 800187a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d015      	beq.n	80018b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001884:	f7ff f906 	bl	8000a94 <HAL_GetTick>
 8001888:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800188a:	e00a      	b.n	80018a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800188c:	f7ff f902 	bl	8000a94 <HAL_GetTick>
 8001890:	4602      	mov	r2, r0
 8001892:	693b      	ldr	r3, [r7, #16]
 8001894:	1ad3      	subs	r3, r2, r3
 8001896:	f241 3288 	movw	r2, #5000	; 0x1388
 800189a:	4293      	cmp	r3, r2
 800189c:	d901      	bls.n	80018a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800189e:	2303      	movs	r3, #3
 80018a0:	e0d7      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80018a2:	4b4b      	ldr	r3, [pc, #300]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 80018a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018a6:	f003 0302 	and.w	r3, r3, #2
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d0ee      	beq.n	800188c <HAL_RCC_OscConfig+0x368>
 80018ae:	e014      	b.n	80018da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018b0:	f7ff f8f0 	bl	8000a94 <HAL_GetTick>
 80018b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018b6:	e00a      	b.n	80018ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80018b8:	f7ff f8ec 	bl	8000a94 <HAL_GetTick>
 80018bc:	4602      	mov	r2, r0
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	1ad3      	subs	r3, r2, r3
 80018c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e0c1      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018ce:	4b40      	ldr	r3, [pc, #256]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 80018d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d2:	f003 0302 	and.w	r3, r3, #2
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d1ee      	bne.n	80018b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018da:	7dfb      	ldrb	r3, [r7, #23]
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d105      	bne.n	80018ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018e0:	4b3b      	ldr	r3, [pc, #236]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 80018e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e4:	4a3a      	ldr	r2, [pc, #232]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 80018e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	699b      	ldr	r3, [r3, #24]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	f000 80ad 	beq.w	8001a50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80018f6:	4b36      	ldr	r3, [pc, #216]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f003 030c 	and.w	r3, r3, #12
 80018fe:	2b08      	cmp	r3, #8
 8001900:	d060      	beq.n	80019c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	699b      	ldr	r3, [r3, #24]
 8001906:	2b02      	cmp	r3, #2
 8001908:	d145      	bne.n	8001996 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800190a:	4b33      	ldr	r3, [pc, #204]	; (80019d8 <HAL_RCC_OscConfig+0x4b4>)
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001910:	f7ff f8c0 	bl	8000a94 <HAL_GetTick>
 8001914:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001916:	e008      	b.n	800192a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001918:	f7ff f8bc 	bl	8000a94 <HAL_GetTick>
 800191c:	4602      	mov	r2, r0
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	1ad3      	subs	r3, r2, r3
 8001922:	2b02      	cmp	r3, #2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e093      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800192a:	4b29      	ldr	r3, [pc, #164]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001932:	2b00      	cmp	r3, #0
 8001934:	d1f0      	bne.n	8001918 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69da      	ldr	r2, [r3, #28]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	431a      	orrs	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001944:	019b      	lsls	r3, r3, #6
 8001946:	431a      	orrs	r2, r3
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800194c:	085b      	lsrs	r3, r3, #1
 800194e:	3b01      	subs	r3, #1
 8001950:	041b      	lsls	r3, r3, #16
 8001952:	431a      	orrs	r2, r3
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001958:	061b      	lsls	r3, r3, #24
 800195a:	431a      	orrs	r2, r3
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001960:	071b      	lsls	r3, r3, #28
 8001962:	491b      	ldr	r1, [pc, #108]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001968:	4b1b      	ldr	r3, [pc, #108]	; (80019d8 <HAL_RCC_OscConfig+0x4b4>)
 800196a:	2201      	movs	r2, #1
 800196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800196e:	f7ff f891 	bl	8000a94 <HAL_GetTick>
 8001972:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001974:	e008      	b.n	8001988 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001976:	f7ff f88d 	bl	8000a94 <HAL_GetTick>
 800197a:	4602      	mov	r2, r0
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	1ad3      	subs	r3, r2, r3
 8001980:	2b02      	cmp	r3, #2
 8001982:	d901      	bls.n	8001988 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001984:	2303      	movs	r3, #3
 8001986:	e064      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001988:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d0f0      	beq.n	8001976 <HAL_RCC_OscConfig+0x452>
 8001994:	e05c      	b.n	8001a50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001996:	4b10      	ldr	r3, [pc, #64]	; (80019d8 <HAL_RCC_OscConfig+0x4b4>)
 8001998:	2200      	movs	r2, #0
 800199a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199c:	f7ff f87a 	bl	8000a94 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019a4:	f7ff f876 	bl	8000a94 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b02      	cmp	r3, #2
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e04d      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_RCC_OscConfig+0x4ac>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x480>
 80019c2:	e045      	b.n	8001a50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	2b01      	cmp	r3, #1
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80019cc:	2301      	movs	r3, #1
 80019ce:	e040      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40007000 	.word	0x40007000
 80019d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80019dc:	4b1f      	ldr	r3, [pc, #124]	; (8001a5c <HAL_RCC_OscConfig+0x538>)
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	699b      	ldr	r3, [r3, #24]
 80019e6:	2b01      	cmp	r3, #1
 80019e8:	d030      	beq.n	8001a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d129      	bne.n	8001a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a02:	429a      	cmp	r2, r3
 8001a04:	d122      	bne.n	8001a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a06:	68fa      	ldr	r2, [r7, #12]
 8001a08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	687a      	ldr	r2, [r7, #4]
 8001a10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001a12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d119      	bne.n	8001a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a22:	085b      	lsrs	r3, r3, #1
 8001a24:	3b01      	subs	r3, #1
 8001a26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a28:	429a      	cmp	r2, r3
 8001a2a:	d10f      	bne.n	8001a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001a38:	429a      	cmp	r2, r3
 8001a3a:	d107      	bne.n	8001a4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a48:	429a      	cmp	r2, r3
 8001a4a:	d001      	beq.n	8001a50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e000      	b.n	8001a52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3718      	adds	r7, #24
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40023800 	.word	0x40023800

08001a60 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8001a64:	f000 fb34 	bl	80020d0 <vTaskStartScheduler>
  
  return osOK;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001a6e:	b480      	push	{r7}
 8001a70:	b083      	sub	sp, #12
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f103 0208 	add.w	r2, r3, #8
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f04f 32ff 	mov.w	r2, #4294967295
 8001a86:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	f103 0208 	add.w	r2, r3, #8
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	f103 0208 	add.w	r2, r3, #8
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b083      	sub	sp, #12
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001abc:	bf00      	nop
 8001abe:	370c      	adds	r7, #12
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac6:	4770      	bx	lr

08001ac8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	68fa      	ldr	r2, [r7, #12]
 8001adc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	689b      	ldr	r3, [r3, #8]
 8001aea:	683a      	ldr	r2, [r7, #0]
 8001aec:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	683a      	ldr	r2, [r7, #0]
 8001af2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	1c5a      	adds	r2, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	601a      	str	r2, [r3, #0]
}
 8001b04:	bf00      	nop
 8001b06:	3714      	adds	r7, #20
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <uxListRemove>:
	( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001b10:	b480      	push	{r7}
 8001b12:	b085      	sub	sp, #20
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6892      	ldr	r2, [r2, #8]
 8001b26:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	687a      	ldr	r2, [r7, #4]
 8001b2e:	6852      	ldr	r2, [r2, #4]
 8001b30:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d103      	bne.n	8001b44 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	689a      	ldr	r2, [r3, #8]
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	1e5a      	subs	r2, r3, #1
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	681b      	ldr	r3, [r3, #0]
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr

08001b64 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08e      	sub	sp, #56	; 0x38
 8001b68:	af04      	add	r7, sp, #16
 8001b6a:	60f8      	str	r0, [r7, #12]
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8001b72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10a      	bne.n	8001b8e <xTaskCreateStatic+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001b78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b7c:	f383 8811 	msr	BASEPRI, r3
 8001b80:	f3bf 8f6f 	isb	sy
 8001b84:	f3bf 8f4f 	dsb	sy
 8001b88:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001b8a:	bf00      	nop
 8001b8c:	e7fe      	b.n	8001b8c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8001b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10a      	bne.n	8001baa <xTaskCreateStatic+0x46>
	__asm volatile
 8001b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b98:	f383 8811 	msr	BASEPRI, r3
 8001b9c:	f3bf 8f6f 	isb	sy
 8001ba0:	f3bf 8f4f 	dsb	sy
 8001ba4:	61fb      	str	r3, [r7, #28]
}
 8001ba6:	bf00      	nop
 8001ba8:	e7fe      	b.n	8001ba8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8001baa:	2354      	movs	r3, #84	; 0x54
 8001bac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2b54      	cmp	r3, #84	; 0x54
 8001bb2:	d00a      	beq.n	8001bca <xTaskCreateStatic+0x66>
	__asm volatile
 8001bb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bb8:	f383 8811 	msr	BASEPRI, r3
 8001bbc:	f3bf 8f6f 	isb	sy
 8001bc0:	f3bf 8f4f 	dsb	sy
 8001bc4:	61bb      	str	r3, [r7, #24]
}
 8001bc6:	bf00      	nop
 8001bc8:	e7fe      	b.n	8001bc8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8001bca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8001bcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d01e      	beq.n	8001c10 <xTaskCreateStatic+0xac>
 8001bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d01b      	beq.n	8001c10 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8001bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001bda:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001be0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8001be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001be4:	2202      	movs	r2, #2
 8001be6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8001bea:	2300      	movs	r3, #0
 8001bec:	9303      	str	r3, [sp, #12]
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	9302      	str	r3, [sp, #8]
 8001bf2:	f107 0314 	add.w	r3, r7, #20
 8001bf6:	9301      	str	r3, [sp, #4]
 8001bf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	68f8      	ldr	r0, [r7, #12]
 8001c04:	f000 f850 	bl	8001ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c08:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001c0a:	f000 f8d5 	bl	8001db8 <prvAddNewTaskToReadyList>
 8001c0e:	e001      	b.n	8001c14 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8001c14:	697b      	ldr	r3, [r7, #20]
	}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3728      	adds	r7, #40	; 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b08c      	sub	sp, #48	; 0x30
 8001c22:	af04      	add	r7, sp, #16
 8001c24:	60f8      	str	r0, [r7, #12]
 8001c26:	60b9      	str	r1, [r7, #8]
 8001c28:	603b      	str	r3, [r7, #0]
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001c2e:	88fb      	ldrh	r3, [r7, #6]
 8001c30:	009b      	lsls	r3, r3, #2
 8001c32:	4618      	mov	r0, r3
 8001c34:	f000 ff70 	bl	8002b18 <pvPortMalloc>
 8001c38:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d00e      	beq.n	8001c5e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8001c40:	2054      	movs	r0, #84	; 0x54
 8001c42:	f000 ff69 	bl	8002b18 <pvPortMalloc>
 8001c46:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d003      	beq.n	8001c56 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	697a      	ldr	r2, [r7, #20]
 8001c52:	631a      	str	r2, [r3, #48]	; 0x30
 8001c54:	e005      	b.n	8001c62 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8001c56:	6978      	ldr	r0, [r7, #20]
 8001c58:	f001 f82a 	bl	8002cb0 <vPortFree>
 8001c5c:	e001      	b.n	8001c62 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d017      	beq.n	8001c98 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8001c70:	88fa      	ldrh	r2, [r7, #6]
 8001c72:	2300      	movs	r3, #0
 8001c74:	9303      	str	r3, [sp, #12]
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	9302      	str	r3, [sp, #8]
 8001c7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c7c:	9301      	str	r3, [sp, #4]
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	68b9      	ldr	r1, [r7, #8]
 8001c86:	68f8      	ldr	r0, [r7, #12]
 8001c88:	f000 f80e 	bl	8001ca8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8001c8c:	69f8      	ldr	r0, [r7, #28]
 8001c8e:	f000 f893 	bl	8001db8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8001c92:	2301      	movs	r3, #1
 8001c94:	61bb      	str	r3, [r7, #24]
 8001c96:	e002      	b.n	8001c9e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8001c98:	f04f 33ff 	mov.w	r3, #4294967295
 8001c9c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8001c9e:	69bb      	ldr	r3, [r7, #24]
	}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3720      	adds	r7, #32
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b088      	sub	sp, #32
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
 8001cb4:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cb8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	009b      	lsls	r3, r3, #2
 8001cc4:	4413      	add	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	f023 0307 	bic.w	r3, r3, #7
 8001cce:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001cd0:	69bb      	ldr	r3, [r7, #24]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d00a      	beq.n	8001cf0 <prvInitialiseNewTask+0x48>
	__asm volatile
 8001cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cde:	f383 8811 	msr	BASEPRI, r3
 8001ce2:	f3bf 8f6f 	isb	sy
 8001ce6:	f3bf 8f4f 	dsb	sy
 8001cea:	617b      	str	r3, [r7, #20]
}
 8001cec:	bf00      	nop
 8001cee:	e7fe      	b.n	8001cee <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d01f      	beq.n	8001d36 <prvInitialiseNewTask+0x8e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	61fb      	str	r3, [r7, #28]
 8001cfa:	e012      	b.n	8001d22 <prvInitialiseNewTask+0x7a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8001cfc:	68ba      	ldr	r2, [r7, #8]
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	4413      	add	r3, r2
 8001d02:	7819      	ldrb	r1, [r3, #0]
 8001d04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	4413      	add	r3, r2
 8001d0a:	3334      	adds	r3, #52	; 0x34
 8001d0c:	460a      	mov	r2, r1
 8001d0e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001d10:	68ba      	ldr	r2, [r7, #8]
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <prvInitialiseNewTask+0x82>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	61fb      	str	r3, [r7, #28]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	2b0f      	cmp	r3, #15
 8001d26:	d9e9      	bls.n	8001cfc <prvInitialiseNewTask+0x54>
 8001d28:	e000      	b.n	8001d2c <prvInitialiseNewTask+0x84>
			{
				break;
 8001d2a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8001d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d34:	e003      	b.n	8001d3e <prvInitialiseNewTask+0x96>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d38:	2200      	movs	r2, #0
 8001d3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8001d3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d40:	2b06      	cmp	r3, #6
 8001d42:	d901      	bls.n	8001d48 <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8001d44:	2306      	movs	r3, #6
 8001d46:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8001d48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d4a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8001d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001d52:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8001d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d56:	2200      	movs	r2, #0
 8001d58:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8001d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff fea5 	bl	8001aae <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d66:	3318      	adds	r3, #24
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff fea0 	bl	8001aae <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8001d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d70:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d72:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d76:	f1c3 0207 	rsb	r2, r3, #7
 8001d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d7c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8001d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001d82:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8001d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d86:	2200      	movs	r2, #0
 8001d88:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001d8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	68f9      	ldr	r1, [r7, #12]
 8001d96:	69b8      	ldr	r0, [r7, #24]
 8001d98:	f000 fcac 	bl	80026f4 <pxPortInitialiseStack>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001da0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d002      	beq.n	8001dae <prvInitialiseNewTask+0x106>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001daa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001dac:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001dae:	bf00      	nop
 8001db0:	3720      	adds	r7, #32
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
	...

08001db8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001dc0:	f000 fdc8 	bl	8002954 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001dc4:	4b2a      	ldr	r3, [pc, #168]	; (8001e70 <prvAddNewTaskToReadyList+0xb8>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	3301      	adds	r3, #1
 8001dca:	4a29      	ldr	r2, [pc, #164]	; (8001e70 <prvAddNewTaskToReadyList+0xb8>)
 8001dcc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8001dce:	4b29      	ldr	r3, [pc, #164]	; (8001e74 <prvAddNewTaskToReadyList+0xbc>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d109      	bne.n	8001dea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001dd6:	4a27      	ldr	r2, [pc, #156]	; (8001e74 <prvAddNewTaskToReadyList+0xbc>)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8001ddc:	4b24      	ldr	r3, [pc, #144]	; (8001e70 <prvAddNewTaskToReadyList+0xb8>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d110      	bne.n	8001e06 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001de4:	f000 fbaa 	bl	800253c <prvInitialiseTaskLists>
 8001de8:	e00d      	b.n	8001e06 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8001dea:	4b23      	ldr	r3, [pc, #140]	; (8001e78 <prvAddNewTaskToReadyList+0xc0>)
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d109      	bne.n	8001e06 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001df2:	4b20      	ldr	r3, [pc, #128]	; (8001e74 <prvAddNewTaskToReadyList+0xbc>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d802      	bhi.n	8001e06 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001e00:	4a1c      	ldr	r2, [pc, #112]	; (8001e74 <prvAddNewTaskToReadyList+0xbc>)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001e06:	4b1d      	ldr	r3, [pc, #116]	; (8001e7c <prvAddNewTaskToReadyList+0xc4>)
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	4a1b      	ldr	r2, [pc, #108]	; (8001e7c <prvAddNewTaskToReadyList+0xc4>)
 8001e0e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e14:	2201      	movs	r2, #1
 8001e16:	409a      	lsls	r2, r3
 8001e18:	4b19      	ldr	r3, [pc, #100]	; (8001e80 <prvAddNewTaskToReadyList+0xc8>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	4a18      	ldr	r2, [pc, #96]	; (8001e80 <prvAddNewTaskToReadyList+0xc8>)
 8001e20:	6013      	str	r3, [r2, #0]
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	009b      	lsls	r3, r3, #2
 8001e2e:	4a15      	ldr	r2, [pc, #84]	; (8001e84 <prvAddNewTaskToReadyList+0xcc>)
 8001e30:	441a      	add	r2, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	3304      	adds	r3, #4
 8001e36:	4619      	mov	r1, r3
 8001e38:	4610      	mov	r0, r2
 8001e3a:	f7ff fe45 	bl	8001ac8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8001e3e:	f000 fdb9 	bl	80029b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8001e42:	4b0d      	ldr	r3, [pc, #52]	; (8001e78 <prvAddNewTaskToReadyList+0xc0>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d00e      	beq.n	8001e68 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8001e4a:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <prvAddNewTaskToReadyList+0xbc>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d207      	bcs.n	8001e68 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8001e58:	4b0b      	ldr	r3, [pc, #44]	; (8001e88 <prvAddNewTaskToReadyList+0xd0>)
 8001e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	f3bf 8f4f 	dsb	sy
 8001e64:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	20000394 	.word	0x20000394
 8001e74:	20000294 	.word	0x20000294
 8001e78:	200003a0 	.word	0x200003a0
 8001e7c:	200003b0 	.word	0x200003b0
 8001e80:	2000039c 	.word	0x2000039c
 8001e84:	20000298 	.word	0x20000298
 8001e88:	e000ed04 	.word	0xe000ed04

08001e8c <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8001e94:	f000 fd5e 	bl	8002954 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d102      	bne.n	8001ea4 <vTaskSuspend+0x18>
 8001e9e:	4b3c      	ldr	r3, [pc, #240]	; (8001f90 <vTaskSuspend+0x104>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	e000      	b.n	8001ea6 <vTaskSuspend+0x1a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	3304      	adds	r3, #4
 8001eac:	4618      	mov	r0, r3
 8001eae:	f7ff fe2f 	bl	8001b10 <uxListRemove>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d115      	bne.n	8001ee4 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ebc:	4935      	ldr	r1, [pc, #212]	; (8001f94 <vTaskSuspend+0x108>)
 8001ebe:	4613      	mov	r3, r2
 8001ec0:	009b      	lsls	r3, r3, #2
 8001ec2:	4413      	add	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	440b      	add	r3, r1
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10a      	bne.n	8001ee4 <vTaskSuspend+0x58>
 8001ece:	68fb      	ldr	r3, [r7, #12]
 8001ed0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	43da      	mvns	r2, r3
 8001eda:	4b2f      	ldr	r3, [pc, #188]	; (8001f98 <vTaskSuspend+0x10c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4013      	ands	r3, r2
 8001ee0:	4a2d      	ldr	r2, [pc, #180]	; (8001f98 <vTaskSuspend+0x10c>)
 8001ee2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d004      	beq.n	8001ef6 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	3318      	adds	r3, #24
 8001ef0:	4618      	mov	r0, r3
 8001ef2:	f7ff fe0d 	bl	8001b10 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	3304      	adds	r3, #4
 8001efa:	4619      	mov	r1, r3
 8001efc:	4827      	ldr	r0, [pc, #156]	; (8001f9c <vTaskSuspend+0x110>)
 8001efe:	f7ff fde3 	bl	8001ac8 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d103      	bne.n	8001f16 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	2200      	movs	r2, #0
 8001f12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8001f16:	f000 fd4d 	bl	80029b4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8001f1a:	4b21      	ldr	r3, [pc, #132]	; (8001fa0 <vTaskSuspend+0x114>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d005      	beq.n	8001f2e <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8001f22:	f000 fd17 	bl	8002954 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8001f26:	f000 fba7 	bl	8002678 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8001f2a:	f000 fd43 	bl	80029b4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8001f2e:	4b18      	ldr	r3, [pc, #96]	; (8001f90 <vTaskSuspend+0x104>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d127      	bne.n	8001f88 <vTaskSuspend+0xfc>
		{
			if( xSchedulerRunning != pdFALSE )
 8001f38:	4b19      	ldr	r3, [pc, #100]	; (8001fa0 <vTaskSuspend+0x114>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d017      	beq.n	8001f70 <vTaskSuspend+0xe4>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8001f40:	4b18      	ldr	r3, [pc, #96]	; (8001fa4 <vTaskSuspend+0x118>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d00a      	beq.n	8001f5e <vTaskSuspend+0xd2>
	__asm volatile
 8001f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f4c:	f383 8811 	msr	BASEPRI, r3
 8001f50:	f3bf 8f6f 	isb	sy
 8001f54:	f3bf 8f4f 	dsb	sy
 8001f58:	60bb      	str	r3, [r7, #8]
}
 8001f5a:	bf00      	nop
 8001f5c:	e7fe      	b.n	8001f5c <vTaskSuspend+0xd0>
				portYIELD_WITHIN_API();
 8001f5e:	4b12      	ldr	r3, [pc, #72]	; (8001fa8 <vTaskSuspend+0x11c>)
 8001f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001f64:	601a      	str	r2, [r3, #0]
 8001f66:	f3bf 8f4f 	dsb	sy
 8001f6a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8001f6e:	e00b      	b.n	8001f88 <vTaskSuspend+0xfc>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 8001f70:	4b0a      	ldr	r3, [pc, #40]	; (8001f9c <vTaskSuspend+0x110>)
 8001f72:	681a      	ldr	r2, [r3, #0]
 8001f74:	4b0d      	ldr	r3, [pc, #52]	; (8001fac <vTaskSuspend+0x120>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d103      	bne.n	8001f84 <vTaskSuspend+0xf8>
					pxCurrentTCB = NULL;
 8001f7c:	4b04      	ldr	r3, [pc, #16]	; (8001f90 <vTaskSuspend+0x104>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	601a      	str	r2, [r3, #0]
	}
 8001f82:	e001      	b.n	8001f88 <vTaskSuspend+0xfc>
					vTaskSwitchContext();
 8001f84:	f000 fa66 	bl	8002454 <vTaskSwitchContext>
	}
 8001f88:	bf00      	nop
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000294 	.word	0x20000294
 8001f94:	20000298 	.word	0x20000298
 8001f98:	2000039c 	.word	0x2000039c
 8001f9c:	20000380 	.word	0x20000380
 8001fa0:	200003a0 	.word	0x200003a0
 8001fa4:	200003bc 	.word	0x200003bc
 8001fa8:	e000ed04 	.word	0xe000ed04
 8001fac:	20000394 	.word	0x20000394

08001fb0 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8001fb0:	b480      	push	{r7}
 8001fb2:	b087      	sub	sp, #28
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d10a      	bne.n	8001fdc <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8001fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fca:	f383 8811 	msr	BASEPRI, r3
 8001fce:	f3bf 8f6f 	isb	sy
 8001fd2:	f3bf 8f4f 	dsb	sy
 8001fd6:	60fb      	str	r3, [r7, #12]
}
 8001fd8:	bf00      	nop
 8001fda:	e7fe      	b.n	8001fda <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	695b      	ldr	r3, [r3, #20]
 8001fe0:	4a0a      	ldr	r2, [pc, #40]	; (800200c <prvTaskIsTaskSuspended+0x5c>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d10a      	bne.n	8001ffc <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fea:	4a09      	ldr	r2, [pc, #36]	; (8002010 <prvTaskIsTaskSuspended+0x60>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d005      	beq.n	8001ffc <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001ffc:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8001ffe:	4618      	mov	r0, r3
 8002000:	371c      	adds	r7, #28
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
 800200a:	bf00      	nop
 800200c:	20000380 	.word	0x20000380
 8002010:	20000354 	.word	0x20000354

08002014 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d10a      	bne.n	800203c <vTaskResume+0x28>
	__asm volatile
 8002026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800202a:	f383 8811 	msr	BASEPRI, r3
 800202e:	f3bf 8f6f 	isb	sy
 8002032:	f3bf 8f4f 	dsb	sy
 8002036:	60bb      	str	r3, [r7, #8]
}
 8002038:	bf00      	nop
 800203a:	e7fe      	b.n	800203a <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 800203c:	4b20      	ldr	r3, [pc, #128]	; (80020c0 <vTaskResume+0xac>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	429a      	cmp	r2, r3
 8002044:	d037      	beq.n	80020b6 <vTaskResume+0xa2>
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d034      	beq.n	80020b6 <vTaskResume+0xa2>
		{
			taskENTER_CRITICAL();
 800204c:	f000 fc82 	bl	8002954 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8002050:	68f8      	ldr	r0, [r7, #12]
 8002052:	f7ff ffad 	bl	8001fb0 <prvTaskIsTaskSuspended>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d02a      	beq.n	80020b2 <vTaskResume+0x9e>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	3304      	adds	r3, #4
 8002060:	4618      	mov	r0, r3
 8002062:	f7ff fd55 	bl	8001b10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206a:	2201      	movs	r2, #1
 800206c:	409a      	lsls	r2, r3
 800206e:	4b15      	ldr	r3, [pc, #84]	; (80020c4 <vTaskResume+0xb0>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4313      	orrs	r3, r2
 8002074:	4a13      	ldr	r2, [pc, #76]	; (80020c4 <vTaskResume+0xb0>)
 8002076:	6013      	str	r3, [r2, #0]
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800207c:	4613      	mov	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	4a10      	ldr	r2, [pc, #64]	; (80020c8 <vTaskResume+0xb4>)
 8002086:	441a      	add	r2, r3
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	3304      	adds	r3, #4
 800208c:	4619      	mov	r1, r3
 800208e:	4610      	mov	r0, r2
 8002090:	f7ff fd1a 	bl	8001ac8 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <vTaskResume+0xac>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	429a      	cmp	r2, r3
 80020a0:	d307      	bcc.n	80020b2 <vTaskResume+0x9e>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <vTaskResume+0xb8>)
 80020a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	f3bf 8f4f 	dsb	sy
 80020ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80020b2:	f000 fc7f 	bl	80029b4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80020b6:	bf00      	nop
 80020b8:	3710      	adds	r7, #16
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}
 80020be:	bf00      	nop
 80020c0:	20000294 	.word	0x20000294
 80020c4:	2000039c 	.word	0x2000039c
 80020c8:	20000298 	.word	0x20000298
 80020cc:	e000ed04 	.word	0xe000ed04

080020d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80020de:	463a      	mov	r2, r7
 80020e0:	1d39      	adds	r1, r7, #4
 80020e2:	f107 0308 	add.w	r3, r7, #8
 80020e6:	4618      	mov	r0, r3
 80020e8:	f7fe fa10 	bl	800050c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80020ec:	6839      	ldr	r1, [r7, #0]
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	68ba      	ldr	r2, [r7, #8]
 80020f2:	9202      	str	r2, [sp, #8]
 80020f4:	9301      	str	r3, [sp, #4]
 80020f6:	2300      	movs	r3, #0
 80020f8:	9300      	str	r3, [sp, #0]
 80020fa:	2300      	movs	r3, #0
 80020fc:	460a      	mov	r2, r1
 80020fe:	491e      	ldr	r1, [pc, #120]	; (8002178 <vTaskStartScheduler+0xa8>)
 8002100:	481e      	ldr	r0, [pc, #120]	; (800217c <vTaskStartScheduler+0xac>)
 8002102:	f7ff fd2f 	bl	8001b64 <xTaskCreateStatic>
 8002106:	4603      	mov	r3, r0
 8002108:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <vTaskStartScheduler+0xb0>)
 800210a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800210c:	4b1c      	ldr	r3, [pc, #112]	; (8002180 <vTaskStartScheduler+0xb0>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2b00      	cmp	r3, #0
 8002112:	d002      	beq.n	800211a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002114:	2301      	movs	r3, #1
 8002116:	617b      	str	r3, [r7, #20]
 8002118:	e001      	b.n	800211e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800211a:	2300      	movs	r3, #0
 800211c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d116      	bne.n	8002152 <vTaskStartScheduler+0x82>
	__asm volatile
 8002124:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002128:	f383 8811 	msr	BASEPRI, r3
 800212c:	f3bf 8f6f 	isb	sy
 8002130:	f3bf 8f4f 	dsb	sy
 8002134:	613b      	str	r3, [r7, #16]
}
 8002136:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002138:	4b12      	ldr	r3, [pc, #72]	; (8002184 <vTaskStartScheduler+0xb4>)
 800213a:	f04f 32ff 	mov.w	r2, #4294967295
 800213e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002140:	4b11      	ldr	r3, [pc, #68]	; (8002188 <vTaskStartScheduler+0xb8>)
 8002142:	2201      	movs	r2, #1
 8002144:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <vTaskStartScheduler+0xbc>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800214c:	f000 fb60 	bl	8002810 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002150:	e00e      	b.n	8002170 <vTaskStartScheduler+0xa0>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002152:	697b      	ldr	r3, [r7, #20]
 8002154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002158:	d10a      	bne.n	8002170 <vTaskStartScheduler+0xa0>
	__asm volatile
 800215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	60fb      	str	r3, [r7, #12]
}
 800216c:	bf00      	nop
 800216e:	e7fe      	b.n	800216e <vTaskStartScheduler+0x9e>
}
 8002170:	bf00      	nop
 8002172:	3718      	adds	r7, #24
 8002174:	46bd      	mov	sp, r7
 8002176:	bd80      	pop	{r7, pc}
 8002178:	08002f7c 	.word	0x08002f7c
 800217c:	0800250d 	.word	0x0800250d
 8002180:	200003b8 	.word	0x200003b8
 8002184:	200003b4 	.word	0x200003b4
 8002188:	200003a0 	.word	0x200003a0
 800218c:	20000398 	.word	0x20000398

08002190 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002194:	4b04      	ldr	r3, [pc, #16]	; (80021a8 <vTaskSuspendAll+0x18>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	3301      	adds	r3, #1
 800219a:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <vTaskSuspendAll+0x18>)
 800219c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800219e:	bf00      	nop
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr
 80021a8:	200003bc 	.word	0x200003bc

080021ac <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80021b6:	2300      	movs	r3, #0
 80021b8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80021ba:	4b41      	ldr	r3, [pc, #260]	; (80022c0 <xTaskResumeAll+0x114>)
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d10a      	bne.n	80021d8 <xTaskResumeAll+0x2c>
	__asm volatile
 80021c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021c6:	f383 8811 	msr	BASEPRI, r3
 80021ca:	f3bf 8f6f 	isb	sy
 80021ce:	f3bf 8f4f 	dsb	sy
 80021d2:	603b      	str	r3, [r7, #0]
}
 80021d4:	bf00      	nop
 80021d6:	e7fe      	b.n	80021d6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80021d8:	f000 fbbc 	bl	8002954 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80021dc:	4b38      	ldr	r3, [pc, #224]	; (80022c0 <xTaskResumeAll+0x114>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3b01      	subs	r3, #1
 80021e2:	4a37      	ldr	r2, [pc, #220]	; (80022c0 <xTaskResumeAll+0x114>)
 80021e4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80021e6:	4b36      	ldr	r3, [pc, #216]	; (80022c0 <xTaskResumeAll+0x114>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d161      	bne.n	80022b2 <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80021ee:	4b35      	ldr	r3, [pc, #212]	; (80022c4 <xTaskResumeAll+0x118>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d05d      	beq.n	80022b2 <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80021f6:	e02e      	b.n	8002256 <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80021f8:	4b33      	ldr	r3, [pc, #204]	; (80022c8 <xTaskResumeAll+0x11c>)
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	68db      	ldr	r3, [r3, #12]
 80021fe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	3318      	adds	r3, #24
 8002204:	4618      	mov	r0, r3
 8002206:	f7ff fc83 	bl	8001b10 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	3304      	adds	r3, #4
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fc7e 	bl	8001b10 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002218:	2201      	movs	r2, #1
 800221a:	409a      	lsls	r2, r3
 800221c:	4b2b      	ldr	r3, [pc, #172]	; (80022cc <xTaskResumeAll+0x120>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4313      	orrs	r3, r2
 8002222:	4a2a      	ldr	r2, [pc, #168]	; (80022cc <xTaskResumeAll+0x120>)
 8002224:	6013      	str	r3, [r2, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800222a:	4613      	mov	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	4413      	add	r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4a27      	ldr	r2, [pc, #156]	; (80022d0 <xTaskResumeAll+0x124>)
 8002234:	441a      	add	r2, r3
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	3304      	adds	r3, #4
 800223a:	4619      	mov	r1, r3
 800223c:	4610      	mov	r0, r2
 800223e:	f7ff fc43 	bl	8001ac8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <xTaskResumeAll+0x128>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224c:	429a      	cmp	r2, r3
 800224e:	d302      	bcc.n	8002256 <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 8002250:	4b21      	ldr	r3, [pc, #132]	; (80022d8 <xTaskResumeAll+0x12c>)
 8002252:	2201      	movs	r2, #1
 8002254:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002256:	4b1c      	ldr	r3, [pc, #112]	; (80022c8 <xTaskResumeAll+0x11c>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d1cc      	bne.n	80021f8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d001      	beq.n	8002268 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002264:	f000 fa08 	bl	8002678 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002268:	4b1c      	ldr	r3, [pc, #112]	; (80022dc <xTaskResumeAll+0x130>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d010      	beq.n	8002296 <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002274:	f000 f836 	bl	80022e4 <xTaskIncrementTick>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d002      	beq.n	8002284 <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800227e:	4b16      	ldr	r3, [pc, #88]	; (80022d8 <xTaskResumeAll+0x12c>)
 8002280:	2201      	movs	r2, #1
 8002282:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	3b01      	subs	r3, #1
 8002288:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f1      	bne.n	8002274 <xTaskResumeAll+0xc8>

						xPendedTicks = 0;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <xTaskResumeAll+0x130>)
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002296:	4b10      	ldr	r3, [pc, #64]	; (80022d8 <xTaskResumeAll+0x12c>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d009      	beq.n	80022b2 <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800229e:	2301      	movs	r3, #1
 80022a0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <xTaskResumeAll+0x134>)
 80022a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	f3bf 8f4f 	dsb	sy
 80022ae:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80022b2:	f000 fb7f 	bl	80029b4 <vPortExitCritical>

	return xAlreadyYielded;
 80022b6:	68bb      	ldr	r3, [r7, #8]
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	3710      	adds	r7, #16
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	200003bc 	.word	0x200003bc
 80022c4:	20000394 	.word	0x20000394
 80022c8:	20000354 	.word	0x20000354
 80022cc:	2000039c 	.word	0x2000039c
 80022d0:	20000298 	.word	0x20000298
 80022d4:	20000294 	.word	0x20000294
 80022d8:	200003a8 	.word	0x200003a8
 80022dc:	200003a4 	.word	0x200003a4
 80022e0:	e000ed04 	.word	0xe000ed04

080022e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80022ee:	4b4e      	ldr	r3, [pc, #312]	; (8002428 <xTaskIncrementTick+0x144>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 808e 	bne.w	8002414 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80022f8:	4b4c      	ldr	r3, [pc, #304]	; (800242c <xTaskIncrementTick+0x148>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	3301      	adds	r3, #1
 80022fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8002300:	4a4a      	ldr	r2, [pc, #296]	; (800242c <xTaskIncrementTick+0x148>)
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d120      	bne.n	800234e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800230c:	4b48      	ldr	r3, [pc, #288]	; (8002430 <xTaskIncrementTick+0x14c>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2b00      	cmp	r3, #0
 8002314:	d00a      	beq.n	800232c <xTaskIncrementTick+0x48>
	__asm volatile
 8002316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800231a:	f383 8811 	msr	BASEPRI, r3
 800231e:	f3bf 8f6f 	isb	sy
 8002322:	f3bf 8f4f 	dsb	sy
 8002326:	603b      	str	r3, [r7, #0]
}
 8002328:	bf00      	nop
 800232a:	e7fe      	b.n	800232a <xTaskIncrementTick+0x46>
 800232c:	4b40      	ldr	r3, [pc, #256]	; (8002430 <xTaskIncrementTick+0x14c>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	60fb      	str	r3, [r7, #12]
 8002332:	4b40      	ldr	r3, [pc, #256]	; (8002434 <xTaskIncrementTick+0x150>)
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4a3e      	ldr	r2, [pc, #248]	; (8002430 <xTaskIncrementTick+0x14c>)
 8002338:	6013      	str	r3, [r2, #0]
 800233a:	4a3e      	ldr	r2, [pc, #248]	; (8002434 <xTaskIncrementTick+0x150>)
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	6013      	str	r3, [r2, #0]
 8002340:	4b3d      	ldr	r3, [pc, #244]	; (8002438 <xTaskIncrementTick+0x154>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	3301      	adds	r3, #1
 8002346:	4a3c      	ldr	r2, [pc, #240]	; (8002438 <xTaskIncrementTick+0x154>)
 8002348:	6013      	str	r3, [r2, #0]
 800234a:	f000 f995 	bl	8002678 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800234e:	4b3b      	ldr	r3, [pc, #236]	; (800243c <xTaskIncrementTick+0x158>)
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	693a      	ldr	r2, [r7, #16]
 8002354:	429a      	cmp	r2, r3
 8002356:	d348      	bcc.n	80023ea <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002358:	4b35      	ldr	r3, [pc, #212]	; (8002430 <xTaskIncrementTick+0x14c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d104      	bne.n	800236c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002362:	4b36      	ldr	r3, [pc, #216]	; (800243c <xTaskIncrementTick+0x158>)
 8002364:	f04f 32ff 	mov.w	r2, #4294967295
 8002368:	601a      	str	r2, [r3, #0]
					break;
 800236a:	e03e      	b.n	80023ea <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800236c:	4b30      	ldr	r3, [pc, #192]	; (8002430 <xTaskIncrementTick+0x14c>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800237c:	693a      	ldr	r2, [r7, #16]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	d203      	bcs.n	800238c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8002384:	4a2d      	ldr	r2, [pc, #180]	; (800243c <xTaskIncrementTick+0x158>)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800238a:	e02e      	b.n	80023ea <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	3304      	adds	r3, #4
 8002390:	4618      	mov	r0, r3
 8002392:	f7ff fbbd 	bl	8001b10 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002396:	68bb      	ldr	r3, [r7, #8]
 8002398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800239a:	2b00      	cmp	r3, #0
 800239c:	d004      	beq.n	80023a8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	3318      	adds	r3, #24
 80023a2:	4618      	mov	r0, r3
 80023a4:	f7ff fbb4 	bl	8001b10 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ac:	2201      	movs	r2, #1
 80023ae:	409a      	lsls	r2, r3
 80023b0:	4b23      	ldr	r3, [pc, #140]	; (8002440 <xTaskIncrementTick+0x15c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4313      	orrs	r3, r2
 80023b6:	4a22      	ldr	r2, [pc, #136]	; (8002440 <xTaskIncrementTick+0x15c>)
 80023b8:	6013      	str	r3, [r2, #0]
 80023ba:	68bb      	ldr	r3, [r7, #8]
 80023bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023be:	4613      	mov	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	4a1f      	ldr	r2, [pc, #124]	; (8002444 <xTaskIncrementTick+0x160>)
 80023c8:	441a      	add	r2, r3
 80023ca:	68bb      	ldr	r3, [r7, #8]
 80023cc:	3304      	adds	r3, #4
 80023ce:	4619      	mov	r1, r3
 80023d0:	4610      	mov	r0, r2
 80023d2:	f7ff fb79 	bl	8001ac8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023da:	4b1b      	ldr	r3, [pc, #108]	; (8002448 <xTaskIncrementTick+0x164>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d3b9      	bcc.n	8002358 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80023e4:	2301      	movs	r3, #1
 80023e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80023e8:	e7b6      	b.n	8002358 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80023ea:	4b17      	ldr	r3, [pc, #92]	; (8002448 <xTaskIncrementTick+0x164>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f0:	4914      	ldr	r1, [pc, #80]	; (8002444 <xTaskIncrementTick+0x160>)
 80023f2:	4613      	mov	r3, r2
 80023f4:	009b      	lsls	r3, r3, #2
 80023f6:	4413      	add	r3, r2
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	440b      	add	r3, r1
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d901      	bls.n	8002406 <xTaskIncrementTick+0x122>
			{
				xSwitchRequired = pdTRUE;
 8002402:	2301      	movs	r3, #1
 8002404:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8002406:	4b11      	ldr	r3, [pc, #68]	; (800244c <xTaskIncrementTick+0x168>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d007      	beq.n	800241e <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 800240e:	2301      	movs	r3, #1
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	e004      	b.n	800241e <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8002414:	4b0e      	ldr	r3, [pc, #56]	; (8002450 <xTaskIncrementTick+0x16c>)
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	3301      	adds	r3, #1
 800241a:	4a0d      	ldr	r2, [pc, #52]	; (8002450 <xTaskIncrementTick+0x16c>)
 800241c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800241e:	697b      	ldr	r3, [r7, #20]
}
 8002420:	4618      	mov	r0, r3
 8002422:	3718      	adds	r7, #24
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}
 8002428:	200003bc 	.word	0x200003bc
 800242c:	20000398 	.word	0x20000398
 8002430:	2000034c 	.word	0x2000034c
 8002434:	20000350 	.word	0x20000350
 8002438:	200003ac 	.word	0x200003ac
 800243c:	200003b4 	.word	0x200003b4
 8002440:	2000039c 	.word	0x2000039c
 8002444:	20000298 	.word	0x20000298
 8002448:	20000294 	.word	0x20000294
 800244c:	200003a8 	.word	0x200003a8
 8002450:	200003a4 	.word	0x200003a4

08002454 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800245a:	4b27      	ldr	r3, [pc, #156]	; (80024f8 <vTaskSwitchContext+0xa4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8002462:	4b26      	ldr	r3, [pc, #152]	; (80024fc <vTaskSwitchContext+0xa8>)
 8002464:	2201      	movs	r2, #1
 8002466:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8002468:	e03f      	b.n	80024ea <vTaskSwitchContext+0x96>
		xYieldPending = pdFALSE;
 800246a:	4b24      	ldr	r3, [pc, #144]	; (80024fc <vTaskSwitchContext+0xa8>)
 800246c:	2200      	movs	r2, #0
 800246e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002470:	4b23      	ldr	r3, [pc, #140]	; (8002500 <vTaskSwitchContext+0xac>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	fab3 f383 	clz	r3, r3
 800247c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800247e:	7afb      	ldrb	r3, [r7, #11]
 8002480:	f1c3 031f 	rsb	r3, r3, #31
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	491f      	ldr	r1, [pc, #124]	; (8002504 <vTaskSwitchContext+0xb0>)
 8002488:	697a      	ldr	r2, [r7, #20]
 800248a:	4613      	mov	r3, r2
 800248c:	009b      	lsls	r3, r3, #2
 800248e:	4413      	add	r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d10a      	bne.n	80024b0 <vTaskSwitchContext+0x5c>
	__asm volatile
 800249a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249e:	f383 8811 	msr	BASEPRI, r3
 80024a2:	f3bf 8f6f 	isb	sy
 80024a6:	f3bf 8f4f 	dsb	sy
 80024aa:	607b      	str	r3, [r7, #4]
}
 80024ac:	bf00      	nop
 80024ae:	e7fe      	b.n	80024ae <vTaskSwitchContext+0x5a>
 80024b0:	697a      	ldr	r2, [r7, #20]
 80024b2:	4613      	mov	r3, r2
 80024b4:	009b      	lsls	r3, r3, #2
 80024b6:	4413      	add	r3, r2
 80024b8:	009b      	lsls	r3, r3, #2
 80024ba:	4a12      	ldr	r2, [pc, #72]	; (8002504 <vTaskSwitchContext+0xb0>)
 80024bc:	4413      	add	r3, r2
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	693b      	ldr	r3, [r7, #16]
 80024c2:	685b      	ldr	r3, [r3, #4]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	605a      	str	r2, [r3, #4]
 80024ca:	693b      	ldr	r3, [r7, #16]
 80024cc:	685a      	ldr	r2, [r3, #4]
 80024ce:	693b      	ldr	r3, [r7, #16]
 80024d0:	3308      	adds	r3, #8
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d104      	bne.n	80024e0 <vTaskSwitchContext+0x8c>
 80024d6:	693b      	ldr	r3, [r7, #16]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	605a      	str	r2, [r3, #4]
 80024e0:	693b      	ldr	r3, [r7, #16]
 80024e2:	685b      	ldr	r3, [r3, #4]
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	4a08      	ldr	r2, [pc, #32]	; (8002508 <vTaskSwitchContext+0xb4>)
 80024e8:	6013      	str	r3, [r2, #0]
}
 80024ea:	bf00      	nop
 80024ec:	371c      	adds	r7, #28
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr
 80024f6:	bf00      	nop
 80024f8:	200003bc 	.word	0x200003bc
 80024fc:	200003a8 	.word	0x200003a8
 8002500:	2000039c 	.word	0x2000039c
 8002504:	20000298 	.word	0x20000298
 8002508:	20000294 	.word	0x20000294

0800250c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8002514:	f000 f852 	bl	80025bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <prvIdleTask+0x28>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d9f9      	bls.n	8002514 <prvIdleTask+0x8>
			{
				taskYIELD();
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <prvIdleTask+0x2c>)
 8002522:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002526:	601a      	str	r2, [r3, #0]
 8002528:	f3bf 8f4f 	dsb	sy
 800252c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8002530:	e7f0      	b.n	8002514 <prvIdleTask+0x8>
 8002532:	bf00      	nop
 8002534:	20000298 	.word	0x20000298
 8002538:	e000ed04 	.word	0xe000ed04

0800253c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800253c:	b580      	push	{r7, lr}
 800253e:	b082      	sub	sp, #8
 8002540:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002542:	2300      	movs	r3, #0
 8002544:	607b      	str	r3, [r7, #4]
 8002546:	e00c      	b.n	8002562 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002548:	687a      	ldr	r2, [r7, #4]
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	4a12      	ldr	r2, [pc, #72]	; (800259c <prvInitialiseTaskLists+0x60>)
 8002554:	4413      	add	r3, r2
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fa89 	bl	8001a6e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	3301      	adds	r3, #1
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2b06      	cmp	r3, #6
 8002566:	d9ef      	bls.n	8002548 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8002568:	480d      	ldr	r0, [pc, #52]	; (80025a0 <prvInitialiseTaskLists+0x64>)
 800256a:	f7ff fa80 	bl	8001a6e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800256e:	480d      	ldr	r0, [pc, #52]	; (80025a4 <prvInitialiseTaskLists+0x68>)
 8002570:	f7ff fa7d 	bl	8001a6e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8002574:	480c      	ldr	r0, [pc, #48]	; (80025a8 <prvInitialiseTaskLists+0x6c>)
 8002576:	f7ff fa7a 	bl	8001a6e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800257a:	480c      	ldr	r0, [pc, #48]	; (80025ac <prvInitialiseTaskLists+0x70>)
 800257c:	f7ff fa77 	bl	8001a6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8002580:	480b      	ldr	r0, [pc, #44]	; (80025b0 <prvInitialiseTaskLists+0x74>)
 8002582:	f7ff fa74 	bl	8001a6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8002586:	4b0b      	ldr	r3, [pc, #44]	; (80025b4 <prvInitialiseTaskLists+0x78>)
 8002588:	4a05      	ldr	r2, [pc, #20]	; (80025a0 <prvInitialiseTaskLists+0x64>)
 800258a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800258c:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <prvInitialiseTaskLists+0x7c>)
 800258e:	4a05      	ldr	r2, [pc, #20]	; (80025a4 <prvInitialiseTaskLists+0x68>)
 8002590:	601a      	str	r2, [r3, #0]
}
 8002592:	bf00      	nop
 8002594:	3708      	adds	r7, #8
 8002596:	46bd      	mov	sp, r7
 8002598:	bd80      	pop	{r7, pc}
 800259a:	bf00      	nop
 800259c:	20000298 	.word	0x20000298
 80025a0:	20000324 	.word	0x20000324
 80025a4:	20000338 	.word	0x20000338
 80025a8:	20000354 	.word	0x20000354
 80025ac:	20000368 	.word	0x20000368
 80025b0:	20000380 	.word	0x20000380
 80025b4:	2000034c 	.word	0x2000034c
 80025b8:	20000350 	.word	0x20000350

080025bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025c2:	e019      	b.n	80025f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80025c4:	f000 f9c6 	bl	8002954 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80025c8:	4b10      	ldr	r3, [pc, #64]	; (800260c <prvCheckTasksWaitingTermination+0x50>)
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	68db      	ldr	r3, [r3, #12]
 80025ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7ff fa9b 	bl	8001b10 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80025da:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <prvCheckTasksWaitingTermination+0x54>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	3b01      	subs	r3, #1
 80025e0:	4a0b      	ldr	r2, [pc, #44]	; (8002610 <prvCheckTasksWaitingTermination+0x54>)
 80025e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80025e4:	4b0b      	ldr	r3, [pc, #44]	; (8002614 <prvCheckTasksWaitingTermination+0x58>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	4a0a      	ldr	r2, [pc, #40]	; (8002614 <prvCheckTasksWaitingTermination+0x58>)
 80025ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80025ee:	f000 f9e1 	bl	80029b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f810 	bl	8002618 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <prvCheckTasksWaitingTermination+0x58>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d1e1      	bne.n	80025c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8002600:	bf00      	nop
 8002602:	bf00      	nop
 8002604:	3708      	adds	r7, #8
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	20000368 	.word	0x20000368
 8002610:	20000394 	.word	0x20000394
 8002614:	2000037c 	.word	0x2000037c

08002618 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8002618:	b580      	push	{r7, lr}
 800261a:	b084      	sub	sp, #16
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002626:	2b00      	cmp	r3, #0
 8002628:	d108      	bne.n	800263c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fb3e 	bl	8002cb0 <vPortFree>
				vPortFree( pxTCB );
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f000 fb3b 	bl	8002cb0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800263a:	e018      	b.n	800266e <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002642:	2b01      	cmp	r3, #1
 8002644:	d103      	bne.n	800264e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 fb32 	bl	8002cb0 <vPortFree>
	}
 800264c:	e00f      	b.n	800266e <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002654:	2b02      	cmp	r3, #2
 8002656:	d00a      	beq.n	800266e <prvDeleteTCB+0x56>
	__asm volatile
 8002658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800265c:	f383 8811 	msr	BASEPRI, r3
 8002660:	f3bf 8f6f 	isb	sy
 8002664:	f3bf 8f4f 	dsb	sy
 8002668:	60fb      	str	r3, [r7, #12]
}
 800266a:	bf00      	nop
 800266c:	e7fe      	b.n	800266c <prvDeleteTCB+0x54>
	}
 800266e:	bf00      	nop
 8002670:	3710      	adds	r7, #16
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800267e:	4b0c      	ldr	r3, [pc, #48]	; (80026b0 <prvResetNextTaskUnblockTime+0x38>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d104      	bne.n	8002692 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8002688:	4b0a      	ldr	r3, [pc, #40]	; (80026b4 <prvResetNextTaskUnblockTime+0x3c>)
 800268a:	f04f 32ff 	mov.w	r2, #4294967295
 800268e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8002690:	e008      	b.n	80026a4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002692:	4b07      	ldr	r3, [pc, #28]	; (80026b0 <prvResetNextTaskUnblockTime+0x38>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	68db      	ldr	r3, [r3, #12]
 800269a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <prvResetNextTaskUnblockTime+0x3c>)
 80026a2:	6013      	str	r3, [r2, #0]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	2000034c 	.word	0x2000034c
 80026b4:	200003b4 	.word	0x200003b4

080026b8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80026be:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <xTaskGetSchedulerState+0x34>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d102      	bne.n	80026cc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80026c6:	2301      	movs	r3, #1
 80026c8:	607b      	str	r3, [r7, #4]
 80026ca:	e008      	b.n	80026de <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80026cc:	4b08      	ldr	r3, [pc, #32]	; (80026f0 <xTaskGetSchedulerState+0x38>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80026d4:	2302      	movs	r3, #2
 80026d6:	607b      	str	r3, [r7, #4]
 80026d8:	e001      	b.n	80026de <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80026da:	2300      	movs	r3, #0
 80026dc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80026de:	687b      	ldr	r3, [r7, #4]
	}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	200003a0 	.word	0x200003a0
 80026f0:	200003bc 	.word	0x200003bc

080026f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80026f4:	b480      	push	{r7}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	60f8      	str	r0, [r7, #12]
 80026fc:	60b9      	str	r1, [r7, #8]
 80026fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	3b04      	subs	r3, #4
 8002704:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800270c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	3b04      	subs	r3, #4
 8002712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f023 0201 	bic.w	r2, r3, #1
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	3b04      	subs	r3, #4
 8002722:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002724:	4a0c      	ldr	r2, [pc, #48]	; (8002758 <pxPortInitialiseStack+0x64>)
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	3b14      	subs	r3, #20
 800272e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8002730:	687a      	ldr	r2, [r7, #4]
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	3b04      	subs	r3, #4
 800273a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f06f 0202 	mvn.w	r2, #2
 8002742:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	3b20      	subs	r3, #32
 8002748:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800274a:	68fb      	ldr	r3, [r7, #12]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3714      	adds	r7, #20
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	0800275d 	.word	0x0800275d

0800275c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800275c:	b480      	push	{r7}
 800275e:	b085      	sub	sp, #20
 8002760:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8002762:	2300      	movs	r3, #0
 8002764:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002766:	4b12      	ldr	r3, [pc, #72]	; (80027b0 <prvTaskExitError+0x54>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800276e:	d00a      	beq.n	8002786 <prvTaskExitError+0x2a>
	__asm volatile
 8002770:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002774:	f383 8811 	msr	BASEPRI, r3
 8002778:	f3bf 8f6f 	isb	sy
 800277c:	f3bf 8f4f 	dsb	sy
 8002780:	60fb      	str	r3, [r7, #12]
}
 8002782:	bf00      	nop
 8002784:	e7fe      	b.n	8002784 <prvTaskExitError+0x28>
	__asm volatile
 8002786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800278a:	f383 8811 	msr	BASEPRI, r3
 800278e:	f3bf 8f6f 	isb	sy
 8002792:	f3bf 8f4f 	dsb	sy
 8002796:	60bb      	str	r3, [r7, #8]
}
 8002798:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800279a:	bf00      	nop
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0fc      	beq.n	800279c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80027a2:	bf00      	nop
 80027a4:	bf00      	nop
 80027a6:	3714      	adds	r7, #20
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	2000000c 	.word	0x2000000c
	...

080027c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80027c0:	4b07      	ldr	r3, [pc, #28]	; (80027e0 <pxCurrentTCBConst2>)
 80027c2:	6819      	ldr	r1, [r3, #0]
 80027c4:	6808      	ldr	r0, [r1, #0]
 80027c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80027ca:	f380 8809 	msr	PSP, r0
 80027ce:	f3bf 8f6f 	isb	sy
 80027d2:	f04f 0000 	mov.w	r0, #0
 80027d6:	f380 8811 	msr	BASEPRI, r0
 80027da:	4770      	bx	lr
 80027dc:	f3af 8000 	nop.w

080027e0 <pxCurrentTCBConst2>:
 80027e0:	20000294 	.word	0x20000294
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80027e4:	bf00      	nop
 80027e6:	bf00      	nop

080027e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80027e8:	4808      	ldr	r0, [pc, #32]	; (800280c <prvPortStartFirstTask+0x24>)
 80027ea:	6800      	ldr	r0, [r0, #0]
 80027ec:	6800      	ldr	r0, [r0, #0]
 80027ee:	f380 8808 	msr	MSP, r0
 80027f2:	f04f 0000 	mov.w	r0, #0
 80027f6:	f380 8814 	msr	CONTROL, r0
 80027fa:	b662      	cpsie	i
 80027fc:	b661      	cpsie	f
 80027fe:	f3bf 8f4f 	dsb	sy
 8002802:	f3bf 8f6f 	isb	sy
 8002806:	df00      	svc	0
 8002808:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800280a:	bf00      	nop
 800280c:	e000ed08 	.word	0xe000ed08

08002810 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b086      	sub	sp, #24
 8002814:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002816:	4b46      	ldr	r3, [pc, #280]	; (8002930 <xPortStartScheduler+0x120>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4a46      	ldr	r2, [pc, #280]	; (8002934 <xPortStartScheduler+0x124>)
 800281c:	4293      	cmp	r3, r2
 800281e:	d10a      	bne.n	8002836 <xPortStartScheduler+0x26>
	__asm volatile
 8002820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002824:	f383 8811 	msr	BASEPRI, r3
 8002828:	f3bf 8f6f 	isb	sy
 800282c:	f3bf 8f4f 	dsb	sy
 8002830:	613b      	str	r3, [r7, #16]
}
 8002832:	bf00      	nop
 8002834:	e7fe      	b.n	8002834 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002836:	4b3e      	ldr	r3, [pc, #248]	; (8002930 <xPortStartScheduler+0x120>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a3f      	ldr	r2, [pc, #252]	; (8002938 <xPortStartScheduler+0x128>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d10a      	bne.n	8002856 <xPortStartScheduler+0x46>
	__asm volatile
 8002840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002844:	f383 8811 	msr	BASEPRI, r3
 8002848:	f3bf 8f6f 	isb	sy
 800284c:	f3bf 8f4f 	dsb	sy
 8002850:	60fb      	str	r3, [r7, #12]
}
 8002852:	bf00      	nop
 8002854:	e7fe      	b.n	8002854 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002856:	4b39      	ldr	r3, [pc, #228]	; (800293c <xPortStartScheduler+0x12c>)
 8002858:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	b2db      	uxtb	r3, r3
 8002860:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	22ff      	movs	r2, #255	; 0xff
 8002866:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002868:	697b      	ldr	r3, [r7, #20]
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	b2db      	uxtb	r3, r3
 8002874:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002878:	b2da      	uxtb	r2, r3
 800287a:	4b31      	ldr	r3, [pc, #196]	; (8002940 <xPortStartScheduler+0x130>)
 800287c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800287e:	4b31      	ldr	r3, [pc, #196]	; (8002944 <xPortStartScheduler+0x134>)
 8002880:	2207      	movs	r2, #7
 8002882:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002884:	e009      	b.n	800289a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8002886:	4b2f      	ldr	r3, [pc, #188]	; (8002944 <xPortStartScheduler+0x134>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	3b01      	subs	r3, #1
 800288c:	4a2d      	ldr	r2, [pc, #180]	; (8002944 <xPortStartScheduler+0x134>)
 800288e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002890:	78fb      	ldrb	r3, [r7, #3]
 8002892:	b2db      	uxtb	r3, r3
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	b2db      	uxtb	r3, r3
 8002898:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	b2db      	uxtb	r3, r3
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	2b80      	cmp	r3, #128	; 0x80
 80028a4:	d0ef      	beq.n	8002886 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80028a6:	4b27      	ldr	r3, [pc, #156]	; (8002944 <xPortStartScheduler+0x134>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f1c3 0307 	rsb	r3, r3, #7
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d00a      	beq.n	80028c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80028b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028b6:	f383 8811 	msr	BASEPRI, r3
 80028ba:	f3bf 8f6f 	isb	sy
 80028be:	f3bf 8f4f 	dsb	sy
 80028c2:	60bb      	str	r3, [r7, #8]
}
 80028c4:	bf00      	nop
 80028c6:	e7fe      	b.n	80028c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <xPortStartScheduler+0x134>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	021b      	lsls	r3, r3, #8
 80028ce:	4a1d      	ldr	r2, [pc, #116]	; (8002944 <xPortStartScheduler+0x134>)
 80028d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80028d2:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <xPortStartScheduler+0x134>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80028da:	4a1a      	ldr	r2, [pc, #104]	; (8002944 <xPortStartScheduler+0x134>)
 80028dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	b2da      	uxtb	r2, r3
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80028e6:	4b18      	ldr	r3, [pc, #96]	; (8002948 <xPortStartScheduler+0x138>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a17      	ldr	r2, [pc, #92]	; (8002948 <xPortStartScheduler+0x138>)
 80028ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80028f2:	4b15      	ldr	r3, [pc, #84]	; (8002948 <xPortStartScheduler+0x138>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a14      	ldr	r2, [pc, #80]	; (8002948 <xPortStartScheduler+0x138>)
 80028f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80028fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80028fe:	f000 f8dd 	bl	8002abc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <xPortStartScheduler+0x13c>)
 8002904:	2200      	movs	r2, #0
 8002906:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8002908:	f000 f8fc 	bl	8002b04 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800290c:	4b10      	ldr	r3, [pc, #64]	; (8002950 <xPortStartScheduler+0x140>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a0f      	ldr	r2, [pc, #60]	; (8002950 <xPortStartScheduler+0x140>)
 8002912:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002916:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8002918:	f7ff ff66 	bl	80027e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800291c:	f7ff fd9a 	bl	8002454 <vTaskSwitchContext>
	prvTaskExitError();
 8002920:	f7ff ff1c 	bl	800275c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8002924:	2300      	movs	r3, #0
}
 8002926:	4618      	mov	r0, r3
 8002928:	3718      	adds	r7, #24
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	e000ed00 	.word	0xe000ed00
 8002934:	410fc271 	.word	0x410fc271
 8002938:	410fc270 	.word	0x410fc270
 800293c:	e000e400 	.word	0xe000e400
 8002940:	200003c0 	.word	0x200003c0
 8002944:	200003c4 	.word	0x200003c4
 8002948:	e000ed20 	.word	0xe000ed20
 800294c:	2000000c 	.word	0x2000000c
 8002950:	e000ef34 	.word	0xe000ef34

08002954 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002954:	b480      	push	{r7}
 8002956:	b083      	sub	sp, #12
 8002958:	af00      	add	r7, sp, #0
	__asm volatile
 800295a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800295e:	f383 8811 	msr	BASEPRI, r3
 8002962:	f3bf 8f6f 	isb	sy
 8002966:	f3bf 8f4f 	dsb	sy
 800296a:	607b      	str	r3, [r7, #4]
}
 800296c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800296e:	4b0f      	ldr	r3, [pc, #60]	; (80029ac <vPortEnterCritical+0x58>)
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	3301      	adds	r3, #1
 8002974:	4a0d      	ldr	r2, [pc, #52]	; (80029ac <vPortEnterCritical+0x58>)
 8002976:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <vPortEnterCritical+0x58>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	2b01      	cmp	r3, #1
 800297e:	d10f      	bne.n	80029a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002980:	4b0b      	ldr	r3, [pc, #44]	; (80029b0 <vPortEnterCritical+0x5c>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d00a      	beq.n	80029a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800298a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800298e:	f383 8811 	msr	BASEPRI, r3
 8002992:	f3bf 8f6f 	isb	sy
 8002996:	f3bf 8f4f 	dsb	sy
 800299a:	603b      	str	r3, [r7, #0]
}
 800299c:	bf00      	nop
 800299e:	e7fe      	b.n	800299e <vPortEnterCritical+0x4a>
	}
}
 80029a0:	bf00      	nop
 80029a2:	370c      	adds	r7, #12
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	2000000c 	.word	0x2000000c
 80029b0:	e000ed04 	.word	0xe000ed04

080029b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80029b4:	b480      	push	{r7}
 80029b6:	b083      	sub	sp, #12
 80029b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80029ba:	4b12      	ldr	r3, [pc, #72]	; (8002a04 <vPortExitCritical+0x50>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d10a      	bne.n	80029d8 <vPortExitCritical+0x24>
	__asm volatile
 80029c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029c6:	f383 8811 	msr	BASEPRI, r3
 80029ca:	f3bf 8f6f 	isb	sy
 80029ce:	f3bf 8f4f 	dsb	sy
 80029d2:	607b      	str	r3, [r7, #4]
}
 80029d4:	bf00      	nop
 80029d6:	e7fe      	b.n	80029d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80029d8:	4b0a      	ldr	r3, [pc, #40]	; (8002a04 <vPortExitCritical+0x50>)
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	3b01      	subs	r3, #1
 80029de:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <vPortExitCritical+0x50>)
 80029e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80029e2:	4b08      	ldr	r3, [pc, #32]	; (8002a04 <vPortExitCritical+0x50>)
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d105      	bne.n	80029f6 <vPortExitCritical+0x42>
 80029ea:	2300      	movs	r3, #0
 80029ec:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80029f6:	bf00      	nop
 80029f8:	370c      	adds	r7, #12
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr
 8002a02:	bf00      	nop
 8002a04:	2000000c 	.word	0x2000000c
	...

08002a10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8002a10:	f3ef 8009 	mrs	r0, PSP
 8002a14:	f3bf 8f6f 	isb	sy
 8002a18:	4b15      	ldr	r3, [pc, #84]	; (8002a70 <pxCurrentTCBConst>)
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	f01e 0f10 	tst.w	lr, #16
 8002a20:	bf08      	it	eq
 8002a22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002a26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a2a:	6010      	str	r0, [r2, #0]
 8002a2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002a30:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002a34:	f380 8811 	msr	BASEPRI, r0
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	f3bf 8f6f 	isb	sy
 8002a40:	f7ff fd08 	bl	8002454 <vTaskSwitchContext>
 8002a44:	f04f 0000 	mov.w	r0, #0
 8002a48:	f380 8811 	msr	BASEPRI, r0
 8002a4c:	bc09      	pop	{r0, r3}
 8002a4e:	6819      	ldr	r1, [r3, #0]
 8002a50:	6808      	ldr	r0, [r1, #0]
 8002a52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a56:	f01e 0f10 	tst.w	lr, #16
 8002a5a:	bf08      	it	eq
 8002a5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002a60:	f380 8809 	msr	PSP, r0
 8002a64:	f3bf 8f6f 	isb	sy
 8002a68:	4770      	bx	lr
 8002a6a:	bf00      	nop
 8002a6c:	f3af 8000 	nop.w

08002a70 <pxCurrentTCBConst>:
 8002a70:	20000294 	.word	0x20000294
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002a74:	bf00      	nop
 8002a76:	bf00      	nop

08002a78 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b082      	sub	sp, #8
 8002a7c:	af00      	add	r7, sp, #0
	__asm volatile
 8002a7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a82:	f383 8811 	msr	BASEPRI, r3
 8002a86:	f3bf 8f6f 	isb	sy
 8002a8a:	f3bf 8f4f 	dsb	sy
 8002a8e:	607b      	str	r3, [r7, #4]
}
 8002a90:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002a92:	f7ff fc27 	bl	80022e4 <xTaskIncrementTick>
 8002a96:	4603      	mov	r3, r0
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d003      	beq.n	8002aa4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002a9c:	4b06      	ldr	r3, [pc, #24]	; (8002ab8 <xPortSysTickHandler+0x40>)
 8002a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002aa2:	601a      	str	r2, [r3, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	f383 8811 	msr	BASEPRI, r3
}
 8002aae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	e000ed04 	.word	0xe000ed04

08002abc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8002ac0:	4b0b      	ldr	r3, [pc, #44]	; (8002af0 <vPortSetupTimerInterrupt+0x34>)
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002ac6:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <vPortSetupTimerInterrupt+0x38>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002acc:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <vPortSetupTimerInterrupt+0x3c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a0a      	ldr	r2, [pc, #40]	; (8002afc <vPortSetupTimerInterrupt+0x40>)
 8002ad2:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad6:	099b      	lsrs	r3, r3, #6
 8002ad8:	4a09      	ldr	r2, [pc, #36]	; (8002b00 <vPortSetupTimerInterrupt+0x44>)
 8002ada:	3b01      	subs	r3, #1
 8002adc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8002ade:	4b04      	ldr	r3, [pc, #16]	; (8002af0 <vPortSetupTimerInterrupt+0x34>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	601a      	str	r2, [r3, #0]
}
 8002ae4:	bf00      	nop
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aec:	4770      	bx	lr
 8002aee:	bf00      	nop
 8002af0:	e000e010 	.word	0xe000e010
 8002af4:	e000e018 	.word	0xe000e018
 8002af8:	20000000 	.word	0x20000000
 8002afc:	10624dd3 	.word	0x10624dd3
 8002b00:	e000e014 	.word	0xe000e014

08002b04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8002b04:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8002b14 <vPortEnableVFP+0x10>
 8002b08:	6801      	ldr	r1, [r0, #0]
 8002b0a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002b0e:	6001      	str	r1, [r0, #0]
 8002b10:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8002b12:	bf00      	nop
 8002b14:	e000ed88 	.word	0xe000ed88

08002b18 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	b08a      	sub	sp, #40	; 0x28
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8002b24:	f7ff fb34 	bl	8002190 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002b28:	4b5b      	ldr	r3, [pc, #364]	; (8002c98 <pvPortMalloc+0x180>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d101      	bne.n	8002b34 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002b30:	f000 f920 	bl	8002d74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002b34:	4b59      	ldr	r3, [pc, #356]	; (8002c9c <pvPortMalloc+0x184>)
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f040 8093 	bne.w	8002c68 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d01d      	beq.n	8002b84 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8002b48:	2208      	movs	r2, #8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	f003 0307 	and.w	r3, r3, #7
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d014      	beq.n	8002b84 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f023 0307 	bic.w	r3, r3, #7
 8002b60:	3308      	adds	r3, #8
 8002b62:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d00a      	beq.n	8002b84 <pvPortMalloc+0x6c>
	__asm volatile
 8002b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b72:	f383 8811 	msr	BASEPRI, r3
 8002b76:	f3bf 8f6f 	isb	sy
 8002b7a:	f3bf 8f4f 	dsb	sy
 8002b7e:	617b      	str	r3, [r7, #20]
}
 8002b80:	bf00      	nop
 8002b82:	e7fe      	b.n	8002b82 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06e      	beq.n	8002c68 <pvPortMalloc+0x150>
 8002b8a:	4b45      	ldr	r3, [pc, #276]	; (8002ca0 <pvPortMalloc+0x188>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d869      	bhi.n	8002c68 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8002b94:	4b43      	ldr	r3, [pc, #268]	; (8002ca4 <pvPortMalloc+0x18c>)
 8002b96:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8002b98:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <pvPortMalloc+0x18c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002b9e:	e004      	b.n	8002baa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	d903      	bls.n	8002bbc <pvPortMalloc+0xa4>
 8002bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d1f1      	bne.n	8002ba0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8002bbc:	4b36      	ldr	r3, [pc, #216]	; (8002c98 <pvPortMalloc+0x180>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d050      	beq.n	8002c68 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002bc6:	6a3b      	ldr	r3, [r7, #32]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2208      	movs	r2, #8
 8002bcc:	4413      	add	r3, r2
 8002bce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bd2:	681a      	ldr	r2, [r3, #0]
 8002bd4:	6a3b      	ldr	r3, [r7, #32]
 8002bd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bda:	685a      	ldr	r2, [r3, #4]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	1ad2      	subs	r2, r2, r3
 8002be0:	2308      	movs	r3, #8
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d91f      	bls.n	8002c28 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002be8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4413      	add	r3, r2
 8002bee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002bf0:	69bb      	ldr	r3, [r7, #24]
 8002bf2:	f003 0307 	and.w	r3, r3, #7
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d00a      	beq.n	8002c10 <pvPortMalloc+0xf8>
	__asm volatile
 8002bfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bfe:	f383 8811 	msr	BASEPRI, r3
 8002c02:	f3bf 8f6f 	isb	sy
 8002c06:	f3bf 8f4f 	dsb	sy
 8002c0a:	613b      	str	r3, [r7, #16]
}
 8002c0c:	bf00      	nop
 8002c0e:	e7fe      	b.n	8002c0e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c12:	685a      	ldr	r2, [r3, #4]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	1ad2      	subs	r2, r2, r3
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002c22:	69b8      	ldr	r0, [r7, #24]
 8002c24:	f000 f908 	bl	8002e38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002c28:	4b1d      	ldr	r3, [pc, #116]	; (8002ca0 <pvPortMalloc+0x188>)
 8002c2a:	681a      	ldr	r2, [r3, #0]
 8002c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	1ad3      	subs	r3, r2, r3
 8002c32:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <pvPortMalloc+0x188>)
 8002c34:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002c36:	4b1a      	ldr	r3, [pc, #104]	; (8002ca0 <pvPortMalloc+0x188>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ca8 <pvPortMalloc+0x190>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	d203      	bcs.n	8002c4a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002c42:	4b17      	ldr	r3, [pc, #92]	; (8002ca0 <pvPortMalloc+0x188>)
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <pvPortMalloc+0x190>)
 8002c48:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c4c:	685a      	ldr	r2, [r3, #4]
 8002c4e:	4b13      	ldr	r3, [pc, #76]	; (8002c9c <pvPortMalloc+0x184>)
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	431a      	orrs	r2, r3
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8002c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <pvPortMalloc+0x194>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	3301      	adds	r3, #1
 8002c64:	4a11      	ldr	r2, [pc, #68]	; (8002cac <pvPortMalloc+0x194>)
 8002c66:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8002c68:	f7ff faa0 	bl	80021ac <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002c6c:	69fb      	ldr	r3, [r7, #28]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00a      	beq.n	8002c8c <pvPortMalloc+0x174>
	__asm volatile
 8002c76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c7a:	f383 8811 	msr	BASEPRI, r3
 8002c7e:	f3bf 8f6f 	isb	sy
 8002c82:	f3bf 8f4f 	dsb	sy
 8002c86:	60fb      	str	r3, [r7, #12]
}
 8002c88:	bf00      	nop
 8002c8a:	e7fe      	b.n	8002c8a <pvPortMalloc+0x172>
	return pvReturn;
 8002c8c:	69fb      	ldr	r3, [r7, #28]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3728      	adds	r7, #40	; 0x28
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20003fd0 	.word	0x20003fd0
 8002c9c:	20003fe4 	.word	0x20003fe4
 8002ca0:	20003fd4 	.word	0x20003fd4
 8002ca4:	20003fc8 	.word	0x20003fc8
 8002ca8:	20003fd8 	.word	0x20003fd8
 8002cac:	20003fdc 	.word	0x20003fdc

08002cb0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d04d      	beq.n	8002d5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8002cc2:	2308      	movs	r3, #8
 8002cc4:	425b      	negs	r3, r3
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	4413      	add	r3, r2
 8002cca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	685a      	ldr	r2, [r3, #4]
 8002cd4:	4b24      	ldr	r3, [pc, #144]	; (8002d68 <vPortFree+0xb8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d10a      	bne.n	8002cf4 <vPortFree+0x44>
	__asm volatile
 8002cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce2:	f383 8811 	msr	BASEPRI, r3
 8002ce6:	f3bf 8f6f 	isb	sy
 8002cea:	f3bf 8f4f 	dsb	sy
 8002cee:	60fb      	str	r3, [r7, #12]
}
 8002cf0:	bf00      	nop
 8002cf2:	e7fe      	b.n	8002cf2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00a      	beq.n	8002d12 <vPortFree+0x62>
	__asm volatile
 8002cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d00:	f383 8811 	msr	BASEPRI, r3
 8002d04:	f3bf 8f6f 	isb	sy
 8002d08:	f3bf 8f4f 	dsb	sy
 8002d0c:	60bb      	str	r3, [r7, #8]
}
 8002d0e:	bf00      	nop
 8002d10:	e7fe      	b.n	8002d10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	685a      	ldr	r2, [r3, #4]
 8002d16:	4b14      	ldr	r3, [pc, #80]	; (8002d68 <vPortFree+0xb8>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d01e      	beq.n	8002d5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d11a      	bne.n	8002d5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	4b0e      	ldr	r3, [pc, #56]	; (8002d68 <vPortFree+0xb8>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	43db      	mvns	r3, r3
 8002d32:	401a      	ands	r2, r3
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002d38:	f7ff fa2a 	bl	8002190 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	685a      	ldr	r2, [r3, #4]
 8002d40:	4b0a      	ldr	r3, [pc, #40]	; (8002d6c <vPortFree+0xbc>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4413      	add	r3, r2
 8002d46:	4a09      	ldr	r2, [pc, #36]	; (8002d6c <vPortFree+0xbc>)
 8002d48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002d4a:	6938      	ldr	r0, [r7, #16]
 8002d4c:	f000 f874 	bl	8002e38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8002d50:	4b07      	ldr	r3, [pc, #28]	; (8002d70 <vPortFree+0xc0>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	3301      	adds	r3, #1
 8002d56:	4a06      	ldr	r2, [pc, #24]	; (8002d70 <vPortFree+0xc0>)
 8002d58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002d5a:	f7ff fa27 	bl	80021ac <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8002d5e:	bf00      	nop
 8002d60:	3718      	adds	r7, #24
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20003fe4 	.word	0x20003fe4
 8002d6c:	20003fd4 	.word	0x20003fd4
 8002d70:	20003fe0 	.word	0x20003fe0

08002d74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8002d74:	b480      	push	{r7}
 8002d76:	b085      	sub	sp, #20
 8002d78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002d7a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8002d7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8002d80:	4b27      	ldr	r3, [pc, #156]	; (8002e20 <prvHeapInit+0xac>)
 8002d82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	f003 0307 	and.w	r3, r3, #7
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d00c      	beq.n	8002da8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	3307      	adds	r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f023 0307 	bic.w	r3, r3, #7
 8002d9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	4a1f      	ldr	r2, [pc, #124]	; (8002e20 <prvHeapInit+0xac>)
 8002da4:	4413      	add	r3, r2
 8002da6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002dac:	4a1d      	ldr	r2, [pc, #116]	; (8002e24 <prvHeapInit+0xb0>)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8002db2:	4b1c      	ldr	r3, [pc, #112]	; (8002e24 <prvHeapInit+0xb0>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8002dc0:	2208      	movs	r2, #8
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f023 0307 	bic.w	r3, r3, #7
 8002dce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	4a15      	ldr	r2, [pc, #84]	; (8002e28 <prvHeapInit+0xb4>)
 8002dd4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <prvHeapInit+0xb4>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8002dde:	4b12      	ldr	r3, [pc, #72]	; (8002e28 <prvHeapInit+0xb4>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	1ad2      	subs	r2, r2, r3
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002df4:	4b0c      	ldr	r3, [pc, #48]	; (8002e28 <prvHeapInit+0xb4>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <prvHeapInit+0xb8>)
 8002e02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002e04:	683b      	ldr	r3, [r7, #0]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	4a09      	ldr	r2, [pc, #36]	; (8002e30 <prvHeapInit+0xbc>)
 8002e0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002e0c:	4b09      	ldr	r3, [pc, #36]	; (8002e34 <prvHeapInit+0xc0>)
 8002e0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e12:	601a      	str	r2, [r3, #0]
}
 8002e14:	bf00      	nop
 8002e16:	3714      	adds	r7, #20
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1e:	4770      	bx	lr
 8002e20:	200003c8 	.word	0x200003c8
 8002e24:	20003fc8 	.word	0x20003fc8
 8002e28:	20003fd0 	.word	0x20003fd0
 8002e2c:	20003fd8 	.word	0x20003fd8
 8002e30:	20003fd4 	.word	0x20003fd4
 8002e34:	20003fe4 	.word	0x20003fe4

08002e38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b085      	sub	sp, #20
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002e40:	4b28      	ldr	r3, [pc, #160]	; (8002ee4 <prvInsertBlockIntoFreeList+0xac>)
 8002e42:	60fb      	str	r3, [r7, #12]
 8002e44:	e002      	b.n	8002e4c <prvInsertBlockIntoFreeList+0x14>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	687a      	ldr	r2, [r7, #4]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d8f7      	bhi.n	8002e46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	68ba      	ldr	r2, [r7, #8]
 8002e60:	4413      	add	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	429a      	cmp	r2, r3
 8002e66:	d108      	bne.n	8002e7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	685a      	ldr	r2, [r3, #4]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	441a      	add	r2, r3
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	441a      	add	r2, r3
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d118      	bne.n	8002ec0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	4b15      	ldr	r3, [pc, #84]	; (8002ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	429a      	cmp	r2, r3
 8002e98:	d00d      	beq.n	8002eb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	685a      	ldr	r2, [r3, #4]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	441a      	add	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	601a      	str	r2, [r3, #0]
 8002eb4:	e008      	b.n	8002ec8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8002eb6:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <prvInsertBlockIntoFreeList+0xb0>)
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	e003      	b.n	8002ec8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8002ec8:	68fa      	ldr	r2, [r7, #12]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d002      	beq.n	8002ed6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002ed6:	bf00      	nop
 8002ed8:	3714      	adds	r7, #20
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr
 8002ee2:	bf00      	nop
 8002ee4:	20003fc8 	.word	0x20003fc8
 8002ee8:	20003fd0 	.word	0x20003fd0

08002eec <memset>:
 8002eec:	4402      	add	r2, r0
 8002eee:	4603      	mov	r3, r0
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d100      	bne.n	8002ef6 <memset+0xa>
 8002ef4:	4770      	bx	lr
 8002ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8002efa:	e7f9      	b.n	8002ef0 <memset+0x4>

08002efc <__libc_init_array>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	4d0d      	ldr	r5, [pc, #52]	; (8002f34 <__libc_init_array+0x38>)
 8002f00:	4c0d      	ldr	r4, [pc, #52]	; (8002f38 <__libc_init_array+0x3c>)
 8002f02:	1b64      	subs	r4, r4, r5
 8002f04:	10a4      	asrs	r4, r4, #2
 8002f06:	2600      	movs	r6, #0
 8002f08:	42a6      	cmp	r6, r4
 8002f0a:	d109      	bne.n	8002f20 <__libc_init_array+0x24>
 8002f0c:	4d0b      	ldr	r5, [pc, #44]	; (8002f3c <__libc_init_array+0x40>)
 8002f0e:	4c0c      	ldr	r4, [pc, #48]	; (8002f40 <__libc_init_array+0x44>)
 8002f10:	f000 f818 	bl	8002f44 <_init>
 8002f14:	1b64      	subs	r4, r4, r5
 8002f16:	10a4      	asrs	r4, r4, #2
 8002f18:	2600      	movs	r6, #0
 8002f1a:	42a6      	cmp	r6, r4
 8002f1c:	d105      	bne.n	8002f2a <__libc_init_array+0x2e>
 8002f1e:	bd70      	pop	{r4, r5, r6, pc}
 8002f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f24:	4798      	blx	r3
 8002f26:	3601      	adds	r6, #1
 8002f28:	e7ee      	b.n	8002f08 <__libc_init_array+0xc>
 8002f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2e:	4798      	blx	r3
 8002f30:	3601      	adds	r6, #1
 8002f32:	e7f2      	b.n	8002f1a <__libc_init_array+0x1e>
 8002f34:	08002f9c 	.word	0x08002f9c
 8002f38:	08002f9c 	.word	0x08002f9c
 8002f3c:	08002f9c 	.word	0x08002f9c
 8002f40:	08002fa0 	.word	0x08002fa0

08002f44 <_init>:
 8002f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f46:	bf00      	nop
 8002f48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f4a:	bc08      	pop	{r3}
 8002f4c:	469e      	mov	lr, r3
 8002f4e:	4770      	bx	lr

08002f50 <_fini>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	bf00      	nop
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr
